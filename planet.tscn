[gd_scene load_steps=37 format=3 uid="uid://7m4dqlk8r5y6"]

[ext_resource type="Script" path="res://Scripts/Procedural Planet Generation/Planet.gd" id="1_6vnuc"]
[ext_resource type="Curve" uid="uid://c2gpbjcjln5ht" path="res://Assets/planet_LOD_Curve.tres" id="2_3w4t4"]
[ext_resource type="Script" path="res://Scripts/Procedural Planet Generation/TerrainFace.gd" id="2_4jp6r"]
[ext_resource type="Script" path="res://Scripts/Procedural Planet Generation/PlanetNoise.gd" id="2_b1fwg"]
[ext_resource type="Texture2D" uid="uid://dcj1dq4octv5j" path="res://Assets/Planet Colours/planet_terrestrial.tres" id="2_k0a6c"]
[ext_resource type="Script" path="res://Scripts/Procedural Planet Generation/PlanetData.gd" id="2_pdx0l"]
[ext_resource type="Material" uid="uid://dl31udjx1urh2" path="res://Assets/Materials/planet_shader_material.tres" id="3_ew6a1"]
[ext_resource type="Shader" path="res://Assets/Shaders/planet_shader.gdshader" id="5_s8jo7"]

[sub_resource type="FastNoiseLite" id="FastNoiseLite_2c5qk"]
frequency = 1.0

[sub_resource type="Resource" id="Resource_bjoya"]
script = ExtResource("2_b1fwg")
min_height = 0.2
amplitude = 0.4
height_map = SubResource("FastNoiseLite_2c5qk")
use_first_layer_as_mask = false

[sub_resource type="Resource" id="Resource_v7hk1"]
resource_local_to_scene = true
script = ExtResource("2_pdx0l")
name = ""
planet_type = 0
terrain_colour = 0
atmosphere_type = 1
seed = 0
resolution = 7
LODCurve = ExtResource("2_3w4t4")
radius = 1
planet_noise = Array[ExtResource("2_b1fwg")]([SubResource("Resource_bjoya")])
planet_colour = ExtResource("2_k0a6c")
planet_material = ExtResource("3_ew6a1")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_bmu3h"]
render_priority = 0
shader = ExtResource("5_s8jo7")
shader_parameter/min_height = 1.0
shader_parameter/max_height = 1.26268
shader_parameter/height_colour = ExtResource("2_k0a6c")

[sub_resource type="Shader" id="Shader_1w3l6"]
code = "shader_type spatial;

// use uniforms to pass values between code and shaders
uniform float min_height;
uniform float max_height;
// gradient texture to assign colours to planet regions
uniform sampler2D height_colour;

// variable interpolated between vertices
varying float height;

void vertex() {
	// given the origin of the mesh is the centre of the planet,
	// the height is just the length of the current vertex in local space
	height = length(VERTEX);

}

void fragment() {
	// Called for every pixel the material is visible on.
	// linear interpolation of current height between min and max height
	// gives a value for the current height between 0 and 1
	float t = (height - min_height)/(max_height - min_height);
	
	// sample the height_colour texture - because it's a 1D gradient, always use y=0 and set x = t
	// get rgb to remove any alpha channel
	vec3 colour = texture(height_colour, vec2(t, 0.0)).rgb;
	
	// set colour
	ALBEDO = colour;
}

//void light() {
	// Called for every pixel for every light affecting the material.
	// Uncomment to replace the default light processing function with this one.
//}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_qfn3r"]
resource_local_to_scene = true
render_priority = 0
shader = SubResource("Shader_1w3l6")
shader_parameter/min_height = 1.0
shader_parameter/max_height = 1.27799
shader_parameter/height_colour = ExtResource("2_k0a6c")

[sub_resource type="ArrayMesh" id="ArrayMesh_20d66"]
_surfaces = [{
"aabb": AABB(-0.751867, 0.57735, -0.726213, 1.45897, 0.457772, 1.43332),
"attribute_data": PackedByteArray(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
"format": 34359742487,
"index_count": 216,
"index_data": PackedByteArray(7, 0, 8, 0, 0, 0, 8, 0, 1, 0, 0, 0, 8, 0, 9, 0, 1, 0, 9, 0, 2, 0, 1, 0, 9, 0, 10, 0, 2, 0, 10, 0, 3, 0, 2, 0, 10, 0, 11, 0, 3, 0, 11, 0, 4, 0, 3, 0, 11, 0, 12, 0, 4, 0, 12, 0, 5, 0, 4, 0, 12, 0, 13, 0, 5, 0, 13, 0, 6, 0, 5, 0, 14, 0, 15, 0, 7, 0, 15, 0, 8, 0, 7, 0, 15, 0, 16, 0, 8, 0, 16, 0, 9, 0, 8, 0, 16, 0, 17, 0, 9, 0, 17, 0, 10, 0, 9, 0, 17, 0, 18, 0, 10, 0, 18, 0, 11, 0, 10, 0, 18, 0, 19, 0, 11, 0, 19, 0, 12, 0, 11, 0, 19, 0, 20, 0, 12, 0, 20, 0, 13, 0, 12, 0, 21, 0, 22, 0, 14, 0, 22, 0, 15, 0, 14, 0, 22, 0, 23, 0, 15, 0, 23, 0, 16, 0, 15, 0, 23, 0, 24, 0, 16, 0, 24, 0, 17, 0, 16, 0, 24, 0, 25, 0, 17, 0, 25, 0, 18, 0, 17, 0, 25, 0, 26, 0, 18, 0, 26, 0, 19, 0, 18, 0, 26, 0, 27, 0, 19, 0, 27, 0, 20, 0, 19, 0, 28, 0, 29, 0, 21, 0, 29, 0, 22, 0, 21, 0, 29, 0, 30, 0, 22, 0, 30, 0, 23, 0, 22, 0, 30, 0, 31, 0, 23, 0, 31, 0, 24, 0, 23, 0, 31, 0, 32, 0, 24, 0, 32, 0, 25, 0, 24, 0, 32, 0, 33, 0, 25, 0, 33, 0, 26, 0, 25, 0, 33, 0, 34, 0, 26, 0, 34, 0, 27, 0, 26, 0, 35, 0, 36, 0, 28, 0, 36, 0, 29, 0, 28, 0, 36, 0, 37, 0, 29, 0, 37, 0, 30, 0, 29, 0, 37, 0, 38, 0, 30, 0, 38, 0, 31, 0, 30, 0, 38, 0, 39, 0, 31, 0, 39, 0, 32, 0, 31, 0, 39, 0, 40, 0, 32, 0, 40, 0, 33, 0, 32, 0, 40, 0, 41, 0, 33, 0, 41, 0, 34, 0, 33, 0, 42, 0, 43, 0, 35, 0, 43, 0, 36, 0, 35, 0, 43, 0, 44, 0, 36, 0, 44, 0, 37, 0, 36, 0, 44, 0, 45, 0, 37, 0, 45, 0, 38, 0, 37, 0, 45, 0, 46, 0, 38, 0, 46, 0, 39, 0, 38, 0, 46, 0, 47, 0, 39, 0, 47, 0, 40, 0, 39, 0, 47, 0, 48, 0, 40, 0, 48, 0, 41, 0, 40, 0),
"material": SubResource("ShaderMaterial_qfn3r"),
"primitive": 3,
"uv_scale": Vector4(0, 0, 0, 0),
"vertex_count": 49,
"vertex_data": PackedByteArray(58, 205, 19, 191, 58, 205, 19, 63, 58, 205, 19, 63, 106, 99, 199, 190, 42, 10, 41, 63, 42, 10, 41, 63, 214, 123, 69, 190, 107, 2, 50, 63, 107, 2, 50, 63, 0, 0, 0, 0, 243, 4, 53, 63, 243, 4, 53, 63, 164, 17, 69, 62, 176, 162, 49, 63, 176, 162, 49, 63, 162, 17, 197, 62, 195, 18, 39, 63, 195, 18, 39, 63, 34, 126, 25, 63, 34, 126, 25, 63, 34, 126, 25, 63, 195, 18, 39, 191, 195, 18, 39, 63, 162, 17, 197, 62, 144, 102, 225, 190, 172, 48, 76, 63, 144, 102, 225, 62, 141, 34, 109, 190, 160, 55, 106, 63, 93, 32, 252, 62, 0, 0, 0, 0, 107, 59, 116, 63, 44, 140, 2, 63, 254, 141, 100, 62, 21, 190, 97, 63, 238, 0, 243, 62, 173, 195, 222, 62, 75, 205, 73, 63, 173, 195, 222, 62, 195, 18, 39, 63, 195, 18, 39, 63, 162, 17, 197, 62, 176, 162, 49, 191, 176, 162, 49, 63, 162, 17, 69, 62, 234, 216, 236, 190, 4, 6, 92, 63, 173, 195, 94, 62, 86, 177, 119, 190, 166, 254, 124, 63, 86, 177, 119, 62, 0, 0, 0, 0, 224, 126, 132, 63, 36, 138, 128, 62, 237, 216, 108, 62, 204, 234, 113, 63, 234, 216, 108, 62, 234, 216, 236, 62, 4, 6, 92, 63, 173, 195, 94, 62, 176, 162, 49, 63, 176, 162, 49, 63, 162, 17, 69, 62, 74, 66, 61, 191, 74, 66, 61, 63, 0, 0, 0, 0, 238, 91, 241, 190, 82, 197, 97, 63, 0, 0, 0, 0, 238, 91, 113, 190, 139, 201, 120, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 213, 26, 118, 62, 211, 173, 125, 63, 0, 0, 0, 0, 238, 91, 241, 62, 82, 197, 97, 63, 0, 0, 0, 0, 243, 4, 53, 63, 243, 4, 53, 63, 0, 0, 0, 0, 93, 122, 64, 191, 93, 122, 64, 63, 0, 137, 85, 190, 234, 216, 236, 190, 4, 6, 92, 63, 176, 195, 94, 190, 234, 216, 108, 190, 204, 234, 113, 63, 237, 216, 108, 190, 0, 0, 0, 0, 205, 97, 129, 63, 189, 9, 123, 190, 234, 124, 119, 62, 24, 201, 124, 63, 234, 124, 119, 190, 202, 201, 247, 62, 240, 47, 102, 63, 6, 14, 105, 190, 176, 162, 49, 63, 176, 162, 49, 63, 164, 17, 69, 190, 195, 18, 39, 191, 195, 18, 39, 63, 162, 17, 197, 190, 173, 195, 222, 190, 75, 205, 73, 63, 173, 195, 222, 190, 173, 195, 94, 190, 4, 6, 92, 63, 234, 216, 236, 190, 0, 0, 0, 0, 237, 148, 113, 63, 128, 33, 1, 191, 40, 75, 126, 62, 45, 42, 123, 63, 84, 47, 7, 191, 130, 111, 1, 63, 211, 130, 106, 63, 130, 111, 1, 191, 160, 108, 45, 63, 160, 108, 45, 63, 102, 143, 204, 190, 58, 205, 19, 191, 58, 205, 19, 63, 58, 205, 19, 191, 162, 17, 197, 190, 195, 18, 39, 63, 195, 18, 39, 191, 162, 17, 69, 190, 176, 162, 49, 63, 176, 162, 49, 191, 0, 0, 0, 0, 211, 104, 55, 63, 211, 104, 55, 191, 153, 57, 74, 62, 123, 72, 54, 63, 123, 72, 54, 191, 182, 73, 219, 62, 17, 233, 57, 63, 17, 233, 57, 191, 131, 237, 28, 63, 131, 237, 28, 63, 131, 237, 28, 191, 245, 86, 27, 177, 0, 114, 226, 163, 142, 95, 212, 177, 20, 112, 122, 162, 99, 114, 144, 180, 34, 103, 165, 162, 86, 138, 93, 183, 22, 83, 249, 171, 184, 149, 136, 185, 60, 64, 200, 183, 170, 158, 63, 188, 123, 55, 151, 195, 92, 153, 69, 205, 160, 47, 254, 199, 8, 83, 98, 184, 4, 99, 67, 168, 136, 86, 96, 184, 72, 99, 209, 167, 45, 103, 216, 191, 153, 85, 149, 170, 33, 137, 127, 198, 166, 62, 195, 181, 68, 154, 46, 190, 182, 50, 140, 192, 69, 164, 18, 185, 104, 61, 105, 198, 19, 165, 63, 188, 68, 62, 233, 200, 68, 84, 120, 193, 219, 82, 11, 171, 174, 83, 239, 197, 198, 75, 242, 171, 121, 95, 136, 214, 186, 50, 118, 176, 37, 132, 122, 236, 178, 17, 254, 192, 135, 159, 239, 205, 249, 51, 17, 204, 178, 168, 60, 198, 207, 62, 222, 206, 24, 174, 185, 190, 49, 70, 34, 207, 83, 89, 126, 209, 144, 58, 102, 174, 253, 86, 242, 211, 6, 56, 13, 174, 16, 95, 218, 226, 188, 33, 165, 177, 119, 117, 1, 251, 61, 5, 183, 186, 159, 155, 42, 223, 213, 37, 190, 204, 28, 174, 89, 202, 250, 64, 20, 210, 229, 180, 182, 199, 232, 71, 237, 211, 49, 70, 59, 222, 220, 40, 197, 167, 26, 79, 217, 223, 119, 36, 226, 171, 255, 79, 199, 226, 120, 33, 57, 171, 77, 106, 126, 244, 101, 12, 90, 181, 132, 149, 65, 233, 45, 26, 95, 202, 10, 179, 214, 200, 193, 69, 137, 211, 43, 190, 190, 196, 43, 81, 231, 213, 244, 48, 216, 217, 85, 56, 123, 159, 79, 59, 130, 225, 9, 45, 68, 160, 51, 63, 12, 230, 147, 40, 58, 160, 181, 64, 239, 236, 22, 38, 8, 158, 36, 176, 5, 253, 209, 19, 79, 162, 71, 195, 158, 210, 127, 67, 142, 217, 216, 205, 114, 188, 137, 102, 244, 214, 4, 56, 1, 220, 17, 50, 131, 161, 163, 54, 133, 222, 190, 49, 108, 159, 199, 61, 93, 235, 222, 40, 253, 156, 160, 57, 251, 240, 136, 45, 13, 152, 163, 52, 235, 248, 119, 54, 152, 145, 25, 208, 106, 234, 35, 53, 117, 139, 129, 222, 138, 199, 219, 166, 94, 200)
}]

[sub_resource type="ConcavePolygonShape3D" id="ConcavePolygonShape3D_lo5ds"]
data = PackedVector3Array(-0.6526, 0.6526, 0.3849, -0.4402, 0.7976, 0.4402, -0.5774, 0.5774, 0.5774, -0.4402, 0.7976, 0.4402, -0.3894, 0.6603, 0.6603, -0.5774, 0.5774, 0.5774, -0.4402, 0.7976, 0.4402, -0.2316, 0.9149, 0.4924, -0.3894, 0.6603, 0.6603, -0.2316, 0.9149, 0.4924, -0.1929, 0.6953, 0.6953, -0.3894, 0.6603, 0.6603, -0.2316, 0.9149, 0.4924, 0, 0.954, 0.51, -0.1929, 0.6953, 0.6953, 0, 0.954, 0.51, 0, 0.7071, 0.7071, -0.1929, 0.6953, 0.6953, 0, 0.954, 0.51, 0.2232, 0.8818, 0.4746, 0, 0.7071, 0.7071, 0.2232, 0.8818, 0.4746, 0.1925, 0.6939, 0.6939, 0, 0.7071, 0.7071, 0.2232, 0.8818, 0.4746, 0.4351, 0.7883, 0.4351, 0.1925, 0.6939, 0.6939, 0.4351, 0.7883, 0.4351, 0.3849, 0.6526, 0.6526, 0.1925, 0.6939, 0.6939, 0.4351, 0.7883, 0.4351, 0.6526, 0.6526, 0.3849, 0.3849, 0.6526, 0.6526, 0.6526, 0.6526, 0.3849, 0.5996, 0.5996, 0.5996, 0.3849, 0.6526, 0.6526, -0.6939, 0.6939, 0.1925, -0.4626, 0.8595, 0.2175, -0.6526, 0.6526, 0.3849, -0.4626, 0.8595, 0.2175, -0.4402, 0.7976, 0.4402, -0.6526, 0.6526, 0.3849, -0.4626, 0.8595, 0.2175, -0.2419, 0.9883, 0.2419, -0.4402, 0.7976, 0.4402, -0.2419, 0.9883, 0.2419, -0.2316, 0.9149, 0.4924, -0.4402, 0.7976, 0.4402, -0.2419, 0.9883, 0.2419, 0, 1.0351, 0.2511, -0.2316, 0.9149, 0.4924, 0, 1.0351, 0.2511, 0, 0.954, 0.51, -0.2316, 0.9149, 0.4924, 0, 1.0351, 0.2511, 0.2313, 0.945, 0.2313, 0, 0.954, 0.51, 0.2313, 0.945, 0.2313, 0.2232, 0.8818, 0.4746, 0, 0.954, 0.51, 0.2313, 0.945, 0.2313, 0.4626, 0.8595, 0.2175, 0.2232, 0.8818, 0.4746, 0.4626, 0.8595, 0.2175, 0.4351, 0.7883, 0.4351, 0.2232, 0.8818, 0.4746, 0.4626, 0.8595, 0.2175, 0.6939, 0.6939, 0.1925, 0.4351, 0.7883, 0.4351, 0.6939, 0.6939, 0.1925, 0.6526, 0.6526, 0.3849, 0.4351, 0.7883, 0.4351, -0.7393, 0.7393, 0, -0.4714, 0.8819, 0, -0.6939, 0.6939, 0.1925, -0.4714, 0.8819, 0, -0.4626, 0.8595, 0.2175, -0.6939, 0.6939, 0.1925, -0.4714, 0.8819, 0, -0.2357, 0.9718, 0, -0.4626, 0.8595, 0.2175, -0.2357, 0.9718, 0, -0.2419, 0.9883, 0.2419, -0.4626, 0.8595, 0.2175, -0.2357, 0.9718, 0, 0, 1, 0, -0.2419, 0.9883, 0.2419, 0, 1, 0, 0, 1.0351, 0.2511, -0.2419, 0.9883, 0.2419, 0, 1, 0, 0.2403, 0.9909, 0, 0, 1.0351, 0.2511, 0.2403, 0.9909, 0, 0.2313, 0.945, 0.2313, 0, 1.0351, 0.2511, 0.2403, 0.9909, 0, 0.4714, 0.8819, 0, 0.2313, 0.945, 0.2313, 0.4714, 0.8819, 0, 0.4626, 0.8595, 0.2175, 0.2313, 0.945, 0.2313, 0.4714, 0.8819, 0, 0.7071, 0.7071, 0, 0.4626, 0.8595, 0.2175, 0.7071, 0.7071, 0, 0.6939, 0.6939, 0.1925, 0.4626, 0.8595, 0.2175, -0.7519, 0.7519, -0.2085, -0.4626, 0.8595, -0.2175, -0.7393, 0.7393, 0, -0.4626, 0.8595, -0.2175, -0.4714, 0.8819, 0, -0.7393, 0.7393, 0, -0.4626, 0.8595, -0.2175, -0.2313, 0.945, -0.2313, -0.4714, 0.8819, 0, -0.2313, 0.945, -0.2313, -0.2357, 0.9718, 0, -0.4714, 0.8819, 0, -0.2313, 0.945, -0.2313, 0, 1.0108, -0.2452, -0.2357, 0.9718, 0, 0, 1.0108, -0.2452, 0, 1, 0, -0.2357, 0.9718, 0, 0, 1.0108, -0.2452, 0.2417, 0.9874, -0.2417, 0, 1, 0, 0.2417, 0.9874, -0.2417, 0.2403, 0.9909, 0, 0, 1, 0, 0.2417, 0.9874, -0.2417, 0.484, 0.8992, -0.2276, 0.2403, 0.9909, 0, 0.484, 0.8992, -0.2276, 0.4714, 0.8819, 0, 0.2403, 0.9909, 0, 0.484, 0.8992, -0.2276, 0.6939, 0.6939, -0.1925, 0.4714, 0.8819, 0, 0.6939, 0.6939, -0.1925, 0.7071, 0.7071, 0, 0.4714, 0.8819, 0, -0.6526, 0.6526, -0.3849, -0.4351, 0.7883, -0.4351, -0.7519, 0.7519, -0.2085, -0.4351, 0.7883, -0.4351, -0.4626, 0.8595, -0.2175, -0.7519, 0.7519, -0.2085, -0.4351, 0.7883, -0.4351, -0.2175, 0.8595, -0.4626, -0.4626, 0.8595, -0.2175, -0.2175, 0.8595, -0.4626, -0.2313, 0.945, -0.2313, -0.4626, 0.8595, -0.2175, -0.2175, 0.8595, -0.4626, 0, 0.9437, -0.5044, -0.2313, 0.945, -0.2313, 0, 0.9437, -0.5044, 0, 1.0108, -0.2452, -0.2313, 0.945, -0.2313, 0, 0.9437, -0.5044, 0.2483, 0.9811, -0.5281, 0, 1.0108, -0.2452, 0.2483, 0.9811, -0.5281, 0.2417, 0.9874, -0.2417, 0, 1.0108, -0.2452, 0.2483, 0.9811, -0.5281, 0.5056, 0.9161, -0.5056, 0.2417, 0.9874, -0.2417, 0.5056, 0.9161, -0.5056, 0.484, 0.8992, -0.2276, 0.2417, 0.9874, -0.2417, 0.5056, 0.9161, -0.5056, 0.6774, 0.6774, -0.3995, 0.484, 0.8992, -0.2276, 0.6774, 0.6774, -0.3995, 0.6939, 0.6939, -0.1925, 0.484, 0.8992, -0.2276, -0.5774, 0.5774, -0.5774, -0.3849, 0.6526, -0.6526, -0.6526, 0.6526, -0.3849, -0.3849, 0.6526, -0.6526, -0.4351, 0.7883, -0.4351, -0.6526, 0.6526, -0.3849, -0.3849, 0.6526, -0.6526, -0.1925, 0.6939, -0.6939, -0.4351, 0.7883, -0.4351, -0.1925, 0.6939, -0.6939, -0.2175, 0.8595, -0.4626, -0.4351, 0.7883, -0.4351, -0.1925, 0.6939, -0.6939, 0, 0.7164, -0.7164, -0.2175, 0.8595, -0.4626, 0, 0.7164, -0.7164, 0, 0.9437, -0.5044, -0.2175, 0.8595, -0.4626, 0, 0.7164, -0.7164, 0.1975, 0.712, -0.712, 0, 0.9437, -0.5044, 0.1975, 0.712, -0.712, 0.2483, 0.9811, -0.5281, 0, 0.9437, -0.5044, 0.1975, 0.712, -0.712, 0.4283, 0.7262, -0.7262, 0.2483, 0.9811, -0.5281, 0.4283, 0.7262, -0.7262, 0.5056, 0.9161, -0.5056, 0.2483, 0.9811, -0.5281, 0.4283, 0.7262, -0.7262, 0.613, 0.613, -0.613, 0.5056, 0.9161, -0.5056, 0.613, 0.613, -0.613, 0.6774, 0.6774, -0.3995, 0.5056, 0.9161, -0.5056)

[sub_resource type="Shader" id="Shader_8vy0g"]
code = "shader_type spatial;

// use uniforms to pass values between code and shaders
uniform float min_height;
uniform float max_height;
// gradient texture to assign colours to planet regions
uniform sampler2D height_colour;

// variable interpolated between vertices
varying float height;

void vertex() {
	// given the origin of the mesh is the centre of the planet,
	// the height is just the length of the current vertex in local space
	height = length(VERTEX);

}

void fragment() {
	// Called for every pixel the material is visible on.
	// linear interpolation of current height between min and max height
	// gives a value for the current height between 0 and 1
	float t = (height - min_height)/(max_height - min_height);
	
	// sample the height_colour texture - because it's a 1D gradient, always use y=0 and set x = t
	// get rgb to remove any alpha channel
	vec3 colour = texture(height_colour, vec2(t, 0.0)).rgb;
	
	// set colour
	ALBEDO = colour;
}

//void light() {
	// Called for every pixel for every light affecting the material.
	// Uncomment to replace the default light processing function with this one.
//}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_mrjl7"]
resource_local_to_scene = true
render_priority = 0
shader = SubResource("Shader_8vy0g")
shader_parameter/min_height = 1.0
shader_parameter/max_height = 1.27799
shader_parameter/height_colour = ExtResource("2_k0a6c")

[sub_resource type="ArrayMesh" id="ArrayMesh_hr87v"]
_surfaces = [{
"aabb": AABB(-0.785415, -1.02878, -0.716306, 1.55605, 0.45143, 1.44499),
"attribute_data": PackedByteArray(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
"format": 34359742487,
"index_count": 216,
"index_data": PackedByteArray(7, 0, 8, 0, 0, 0, 8, 0, 1, 0, 0, 0, 8, 0, 9, 0, 1, 0, 9, 0, 2, 0, 1, 0, 9, 0, 10, 0, 2, 0, 10, 0, 3, 0, 2, 0, 10, 0, 11, 0, 3, 0, 11, 0, 4, 0, 3, 0, 11, 0, 12, 0, 4, 0, 12, 0, 5, 0, 4, 0, 12, 0, 13, 0, 5, 0, 13, 0, 6, 0, 5, 0, 14, 0, 15, 0, 7, 0, 15, 0, 8, 0, 7, 0, 15, 0, 16, 0, 8, 0, 16, 0, 9, 0, 8, 0, 16, 0, 17, 0, 9, 0, 17, 0, 10, 0, 9, 0, 17, 0, 18, 0, 10, 0, 18, 0, 11, 0, 10, 0, 18, 0, 19, 0, 11, 0, 19, 0, 12, 0, 11, 0, 19, 0, 20, 0, 12, 0, 20, 0, 13, 0, 12, 0, 21, 0, 22, 0, 14, 0, 22, 0, 15, 0, 14, 0, 22, 0, 23, 0, 15, 0, 23, 0, 16, 0, 15, 0, 23, 0, 24, 0, 16, 0, 24, 0, 17, 0, 16, 0, 24, 0, 25, 0, 17, 0, 25, 0, 18, 0, 17, 0, 25, 0, 26, 0, 18, 0, 26, 0, 19, 0, 18, 0, 26, 0, 27, 0, 19, 0, 27, 0, 20, 0, 19, 0, 28, 0, 29, 0, 21, 0, 29, 0, 22, 0, 21, 0, 29, 0, 30, 0, 22, 0, 30, 0, 23, 0, 22, 0, 30, 0, 31, 0, 23, 0, 31, 0, 24, 0, 23, 0, 31, 0, 32, 0, 24, 0, 32, 0, 25, 0, 24, 0, 32, 0, 33, 0, 25, 0, 33, 0, 26, 0, 25, 0, 33, 0, 34, 0, 26, 0, 34, 0, 27, 0, 26, 0, 35, 0, 36, 0, 28, 0, 36, 0, 29, 0, 28, 0, 36, 0, 37, 0, 29, 0, 37, 0, 30, 0, 29, 0, 37, 0, 38, 0, 30, 0, 38, 0, 31, 0, 30, 0, 38, 0, 39, 0, 31, 0, 39, 0, 32, 0, 31, 0, 39, 0, 40, 0, 32, 0, 40, 0, 33, 0, 32, 0, 40, 0, 41, 0, 33, 0, 41, 0, 34, 0, 33, 0, 42, 0, 43, 0, 35, 0, 43, 0, 36, 0, 35, 0, 43, 0, 44, 0, 36, 0, 44, 0, 37, 0, 36, 0, 44, 0, 45, 0, 37, 0, 45, 0, 38, 0, 37, 0, 45, 0, 46, 0, 38, 0, 46, 0, 39, 0, 38, 0, 46, 0, 47, 0, 39, 0, 47, 0, 40, 0, 39, 0, 47, 0, 48, 0, 40, 0, 48, 0, 41, 0, 40, 0),
"material": SubResource("ShaderMaterial_mrjl7"),
"primitive": 3,
"uv_scale": Vector4(0, 0, 0, 0),
"vertex_count": 49,
"vertex_data": PackedByteArray(216, 208, 20, 63, 216, 208, 20, 191, 216, 208, 20, 63, 153, 8, 220, 62, 230, 138, 58, 191, 230, 138, 58, 63, 147, 158, 74, 62, 130, 163, 54, 191, 130, 163, 54, 63, 0, 0, 0, 0, 195, 110, 54, 191, 195, 110, 54, 63, 164, 17, 69, 190, 176, 162, 49, 191, 176, 162, 49, 63, 162, 17, 197, 190, 195, 18, 39, 191, 195, 18, 39, 63, 58, 205, 19, 191, 58, 205, 19, 191, 58, 205, 19, 63, 195, 18, 39, 63, 195, 18, 39, 191, 162, 17, 197, 62, 111, 167, 250, 62, 49, 17, 99, 191, 111, 167, 250, 62, 228, 87, 119, 62, 208, 76, 116, 191, 118, 125, 3, 63, 0, 0, 0, 0, 82, 197, 97, 191, 238, 91, 241, 62, 176, 195, 94, 190, 4, 6, 92, 191, 234, 216, 236, 62, 173, 195, 222, 190, 75, 205, 73, 191, 173, 195, 222, 62, 195, 18, 39, 191, 195, 18, 39, 191, 162, 17, 197, 62, 185, 31, 54, 63, 185, 31, 54, 191, 96, 12, 74, 62, 146, 163, 11, 63, 86, 184, 129, 191, 4, 86, 131, 62, 154, 236, 128, 62, 22, 175, 131, 191, 154, 236, 128, 62, 0, 0, 0, 0, 139, 201, 120, 191, 238, 91, 113, 62, 237, 216, 108, 190, 204, 234, 113, 191, 234, 216, 108, 62, 234, 216, 236, 190, 4, 6, 92, 191, 173, 195, 94, 62, 241, 16, 73, 191, 241, 16, 73, 191, 25, 16, 95, 62, 182, 29, 56, 63, 182, 29, 56, 191, 0, 0, 0, 0, 138, 227, 4, 63, 188, 156, 120, 191, 0, 0, 0, 0, 207, 133, 115, 62, 120, 4, 123, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 191, 0, 0, 0, 0, 241, 91, 113, 190, 139, 201, 120, 191, 0, 0, 0, 0, 238, 91, 241, 190, 82, 197, 97, 191, 0, 0, 0, 0, 118, 178, 55, 191, 118, 178, 55, 191, 0, 0, 0, 0, 208, 243, 49, 63, 208, 243, 49, 191, 164, 107, 69, 190, 167, 137, 246, 62, 139, 6, 101, 191, 236, 224, 103, 190, 128, 93, 119, 62, 4, 169, 124, 191, 131, 93, 119, 190, 0, 0, 0, 0, 139, 201, 120, 191, 241, 91, 113, 190, 236, 216, 108, 190, 204, 234, 113, 191, 236, 216, 108, 190, 234, 216, 236, 190, 4, 6, 92, 191, 176, 195, 94, 190, 24, 36, 50, 191, 24, 36, 50, 191, 52, 161, 69, 190, 83, 72, 69, 63, 83, 72, 69, 191, 165, 179, 232, 190, 239, 247, 231, 62, 211, 35, 82, 191, 239, 247, 231, 190, 173, 195, 94, 62, 4, 6, 92, 191, 234, 216, 236, 190, 0, 0, 0, 0, 82, 197, 97, 191, 238, 91, 241, 190, 176, 195, 94, 190, 4, 6, 92, 191, 234, 216, 236, 190, 173, 195, 222, 190, 75, 205, 73, 191, 173, 195, 222, 190, 195, 18, 39, 191, 195, 18, 39, 191, 162, 17, 197, 190, 95, 69, 33, 63, 95, 69, 33, 191, 95, 69, 33, 191, 46, 250, 207, 62, 66, 82, 48, 191, 66, 82, 48, 191, 162, 17, 69, 62, 176, 162, 49, 191, 176, 162, 49, 191, 0, 0, 0, 0, 212, 95, 55, 191, 212, 95, 55, 191, 164, 17, 69, 190, 176, 162, 49, 191, 176, 162, 49, 191, 162, 17, 197, 190, 195, 18, 39, 191, 195, 18, 39, 191, 210, 33, 20, 191, 210, 33, 20, 191, 210, 33, 20, 191, 176, 191, 114, 98, 20, 85, 132, 170, 99, 155, 128, 77, 240, 51, 39, 154, 85, 115, 27, 70, 80, 39, 24, 148, 209, 120, 106, 57, 121, 25, 48, 157, 245, 107, 213, 65, 116, 17, 52, 158, 134, 94, 91, 73, 88, 10, 40, 220, 1, 92, 251, 71, 23, 28, 22, 220, 90, 193, 157, 97, 126, 86, 71, 171, 11, 169, 32, 77, 5, 57, 56, 162, 165, 121, 235, 52, 164, 20, 150, 160, 40, 113, 55, 57, 18, 12, 118, 163, 28, 109, 207, 57, 151, 3, 178, 167, 150, 99, 209, 68, 144, 1, 52, 218, 197, 90, 18, 82, 75, 27, 224, 147, 201, 203, 94, 82, 86, 99, 142, 172, 45, 174, 185, 58, 36, 59, 131, 170, 101, 128, 102, 16, 164, 2, 209, 182, 215, 109, 241, 38, 200, 14, 225, 208, 142, 106, 226, 42, 93, 18, 92, 210, 22, 97, 25, 43, 194, 33, 107, 209, 134, 99, 71, 49, 23, 28, 119, 212, 4, 203, 207, 61, 107, 102, 213, 169, 23, 187, 127, 44, 97, 77, 191, 171, 52, 144, 55, 4, 131, 17, 68, 189, 4, 114, 12, 8, 42, 14, 216, 195, 157, 102, 144, 25, 27, 30, 33, 204, 82, 83, 31, 44, 108, 57, 157, 210, 70, 77, 181, 37, 231, 56, 24, 207, 98, 176, 180, 46, 215, 62, 160, 172, 142, 195, 220, 40, 171, 91, 111, 169, 181, 166, 234, 11, 40, 46, 120, 182, 85, 99, 174, 6, 209, 24, 237, 192, 163, 85, 46, 21, 177, 40, 167, 199, 40, 71, 217, 38, 231, 60, 53, 206, 5, 66, 185, 46, 151, 69, 107, 208, 59, 172, 72, 19, 139, 53, 63, 179, 56, 176, 195, 20, 126, 59, 191, 177, 236, 185, 192, 14, 121, 75, 48, 174, 128, 79, 94, 3, 7, 58, 111, 182, 19, 71, 208, 17, 56, 47, 37, 190, 38, 61, 108, 33, 127, 58, 160, 198, 76, 57, 188, 42, 32, 68, 35, 203, 149, 211, 161, 26, 209, 120, 28, 157, 146, 189, 172, 13, 111, 81, 39, 172, 206, 185, 19, 10, 182, 75, 112, 174, 122, 182, 99, 3, 135, 71, 144, 176, 169, 65, 10, 15, 15, 61, 171, 183, 79, 57, 170, 27, 36, 56, 221, 189, 5, 52, 252, 37, 113, 62, 53, 196)
}]

[sub_resource type="ConcavePolygonShape3D" id="ConcavePolygonShape3D_qqwq2"]
data = PackedVector3Array(0.6526, -0.6526, 0.3849, 0.4896, -0.887, 0.4896, 0.5813, -0.5813, 0.5813, 0.4896, -0.887, 0.4896, 0.4298, -0.7287, 0.7287, 0.5813, -0.5813, 0.5813, 0.4896, -0.887, 0.4896, 0.2415, -0.9543, 0.5136, 0.4298, -0.7287, 0.7287, 0.2415, -0.9543, 0.5136, 0.1979, -0.7134, 0.7134, 0.4298, -0.7287, 0.7287, 0.2415, -0.9543, 0.5136, 0, -0.8819, 0.4714, 0.1979, -0.7134, 0.7134, 0, -0.8819, 0.4714, 0, -0.7126, 0.7126, 0.1979, -0.7134, 0.7134, 0, -0.8819, 0.4714, -0.2175, -0.8595, 0.4626, 0, -0.7126, 0.7126, -0.2175, -0.8595, 0.4626, -0.1925, -0.6939, 0.6939, 0, -0.7126, 0.7126, -0.2175, -0.8595, 0.4626, -0.4351, -0.7883, 0.4351, -0.1925, -0.6939, 0.6939, -0.4351, -0.7883, 0.4351, -0.3849, -0.6526, 0.6526, -0.1925, -0.6939, 0.6939, -0.4351, -0.7883, 0.4351, -0.6526, -0.6526, 0.3849, -0.3849, -0.6526, 0.6526, -0.6526, -0.6526, 0.3849, -0.5774, -0.5774, 0.5774, -0.3849, -0.6526, 0.6526, 0.7114, -0.7114, 0.1973, 0.5455, -1.0134, 0.2565, 0.6526, -0.6526, 0.3849, 0.5455, -1.0134, 0.2565, 0.4896, -0.887, 0.4896, 0.6526, -0.6526, 0.3849, 0.5455, -1.0134, 0.2565, 0.2518, -1.0288, 0.2518, 0.4896, -0.887, 0.4896, 0.2518, -1.0288, 0.2518, 0.2415, -0.9543, 0.5136, 0.4896, -0.887, 0.4896, 0.2518, -1.0288, 0.2518, 0, -0.9718, 0.2357, 0.2415, -0.9543, 0.5136, 0, -0.9718, 0.2357, 0, -0.8819, 0.4714, 0.2415, -0.9543, 0.5136, 0, -0.9718, 0.2357, -0.2313, -0.945, 0.2313, 0, -0.8819, 0.4714, -0.2313, -0.945, 0.2313, -0.2175, -0.8595, 0.4626, 0, -0.8819, 0.4714, -0.2313, -0.945, 0.2313, -0.4626, -0.8595, 0.2175, -0.2175, -0.8595, 0.4626, -0.4626, -0.8595, 0.2175, -0.4351, -0.7883, 0.4351, -0.2175, -0.8595, 0.4626, -0.4626, -0.8595, 0.2175, -0.7854, -0.7854, 0.2178, -0.4351, -0.7883, 0.4351, -0.7854, -0.7854, 0.2178, -0.6526, -0.6526, 0.3849, -0.4351, -0.7883, 0.4351, 0.7192, -0.7192, 0, 0.5191, -0.9711, 0, 0.7114, -0.7114, 0.1973, 0.5191, -0.9711, 0, 0.5455, -1.0134, 0.2565, 0.7114, -0.7114, 0.1973, 0.5191, -0.9711, 0, 0.2378, -0.9805, 0, 0.5455, -1.0134, 0.2565, 0.2378, -0.9805, 0, 0.2518, -1.0288, 0.2518, 0.5455, -1.0134, 0.2565, 0.2378, -0.9805, 0, 0, -1, 0, 0.2518, -1.0288, 0.2518, 0, -1, 0, 0, -0.9718, 0.2357, 0.2518, -1.0288, 0.2518, 0, -1, 0, -0.2357, -0.9718, 0, 0, -0.9718, 0.2357, -0.2357, -0.9718, 0, -0.2313, -0.945, 0.2313, 0, -0.9718, 0.2357, -0.2357, -0.9718, 0, -0.4714, -0.8819, 0, -0.2313, -0.945, 0.2313, -0.4714, -0.8819, 0, -0.4626, -0.8595, 0.2175, -0.2313, -0.945, 0.2313, -0.4714, -0.8819, 0, -0.7176, -0.7176, 0, -0.4626, -0.8595, 0.2175, -0.7176, -0.7176, 0, -0.7854, -0.7854, 0.2178, -0.4626, -0.8595, 0.2175, 0.6951, -0.6951, -0.1928, 0.4815, -0.8946, -0.2264, 0.7192, -0.7192, 0, 0.4815, -0.8946, -0.2264, 0.5191, -0.9711, 0, 0.7192, -0.7192, 0, 0.4815, -0.8946, -0.2264, 0.2416, -0.987, -0.2416, 0.5191, -0.9711, 0, 0.2416, -0.987, -0.2416, 0.2378, -0.9805, 0, 0.5191, -0.9711, 0, 0.2416, -0.987, -0.2416, 0, -0.9718, -0.2357, 0.2378, -0.9805, 0, 0, -0.9718, -0.2357, 0, -1, 0, 0.2378, -0.9805, 0, 0, -0.9718, -0.2357, -0.2313, -0.945, -0.2313, 0, -1, 0, -0.2313, -0.945, -0.2313, -0.2357, -0.9718, 0, 0, -1, 0, -0.2313, -0.945, -0.2313, -0.4626, -0.8595, -0.2175, -0.2357, -0.9718, 0, -0.4626, -0.8595, -0.2175, -0.4714, -0.8819, 0, -0.2357, -0.9718, 0, -0.4626, -0.8595, -0.2175, -0.6959, -0.6959, -0.193, -0.4714, -0.8819, 0, -0.6959, -0.6959, -0.193, -0.7176, -0.7176, 0, -0.4714, -0.8819, 0, 0.7706, -0.7706, -0.4545, 0.4531, -0.8209, -0.4531, 0.6951, -0.6951, -0.1928, 0.4531, -0.8209, -0.4531, 0.4815, -0.8946, -0.2264, 0.6951, -0.6951, -0.1928, 0.4531, -0.8209, -0.4531, 0.2175, -0.8595, -0.4626, 0.4815, -0.8946, -0.2264, 0.2175, -0.8595, -0.4626, 0.2416, -0.987, -0.2416, 0.4815, -0.8946, -0.2264, 0.2175, -0.8595, -0.4626, 0, -0.8819, -0.4714, 0.2416, -0.987, -0.2416, 0, -0.8819, -0.4714, 0, -0.9718, -0.2357, 0.2416, -0.987, -0.2416, 0, -0.8819, -0.4714, -0.2175, -0.8595, -0.4626, 0, -0.9718, -0.2357, -0.2175, -0.8595, -0.4626, -0.2313, -0.945, -0.2313, 0, -0.9718, -0.2357, -0.2175, -0.8595, -0.4626, -0.4351, -0.7883, -0.4351, -0.2313, -0.945, -0.2313, -0.4351, -0.7883, -0.4351, -0.4626, -0.8595, -0.2175, -0.2313, -0.945, -0.2313, -0.4351, -0.7883, -0.4351, -0.6526, -0.6526, -0.3849, -0.4626, -0.8595, -0.2175, -0.6526, -0.6526, -0.3849, -0.6959, -0.6959, -0.193, -0.4626, -0.8595, -0.2175, 0.63, -0.63, -0.63, 0.4062, -0.6888, -0.6888, 0.7706, -0.7706, -0.4545, 0.4062, -0.6888, -0.6888, 0.4531, -0.8209, -0.4531, 0.7706, -0.7706, -0.4545, 0.4062, -0.6888, -0.6888, 0.1925, -0.6939, -0.6939, 0.4531, -0.8209, -0.4531, 0.1925, -0.6939, -0.6939, 0.2175, -0.8595, -0.4626, 0.4531, -0.8209, -0.4531, 0.1925, -0.6939, -0.6939, 0, -0.7163, -0.7163, 0.2175, -0.8595, -0.4626, 0, -0.7163, -0.7163, 0, -0.8819, -0.4714, 0.2175, -0.8595, -0.4626, 0, -0.7163, -0.7163, -0.1925, -0.6939, -0.6939, 0, -0.8819, -0.4714, -0.1925, -0.6939, -0.6939, -0.2175, -0.8595, -0.4626, 0, -0.8819, -0.4714, -0.1925, -0.6939, -0.6939, -0.3849, -0.6526, -0.6526, -0.2175, -0.8595, -0.4626, -0.3849, -0.6526, -0.6526, -0.4351, -0.7883, -0.4351, -0.2175, -0.8595, -0.4626, -0.3849, -0.6526, -0.6526, -0.5786, -0.5786, -0.5786, -0.4351, -0.7883, -0.4351, -0.5786, -0.5786, -0.5786, -0.6526, -0.6526, -0.3849, -0.4351, -0.7883, -0.4351)

[sub_resource type="Shader" id="Shader_4slr2"]
code = "shader_type spatial;

// use uniforms to pass values between code and shaders
uniform float min_height;
uniform float max_height;
// gradient texture to assign colours to planet regions
uniform sampler2D height_colour;

// variable interpolated between vertices
varying float height;

void vertex() {
	// given the origin of the mesh is the centre of the planet,
	// the height is just the length of the current vertex in local space
	height = length(VERTEX);

}

void fragment() {
	// Called for every pixel the material is visible on.
	// linear interpolation of current height between min and max height
	// gives a value for the current height between 0 and 1
	float t = (height - min_height)/(max_height - min_height);
	
	// sample the height_colour texture - because it's a 1D gradient, always use y=0 and set x = t
	// get rgb to remove any alpha channel
	vec3 colour = texture(height_colour, vec2(t, 0.0)).rgb;
	
	// set colour
	ALBEDO = colour;
}

//void light() {
	// Called for every pixel for every light affecting the material.
	// Uncomment to replace the default light processing function with this one.
//}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_e8otq"]
resource_local_to_scene = true
render_priority = 0
shader = SubResource("Shader_4slr2")
shader_parameter/min_height = 1.0
shader_parameter/max_height = 1.27799
shader_parameter/height_colour = ExtResource("2_k0a6c")

[sub_resource type="ArrayMesh" id="ArrayMesh_586tq"]
_surfaces = [{
"aabb": AABB(-1.14622, -0.785415, -0.798573, 0.568884, 1.53728, 1.51781),
"attribute_data": PackedByteArray(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
"format": 34359742487,
"index_count": 216,
"index_data": PackedByteArray(7, 0, 8, 0, 0, 0, 8, 0, 1, 0, 0, 0, 8, 0, 9, 0, 1, 0, 9, 0, 2, 0, 1, 0, 9, 0, 10, 0, 2, 0, 10, 0, 3, 0, 2, 0, 10, 0, 11, 0, 3, 0, 11, 0, 4, 0, 3, 0, 11, 0, 12, 0, 4, 0, 12, 0, 5, 0, 4, 0, 12, 0, 13, 0, 5, 0, 13, 0, 6, 0, 5, 0, 14, 0, 15, 0, 7, 0, 15, 0, 8, 0, 7, 0, 15, 0, 16, 0, 8, 0, 16, 0, 9, 0, 8, 0, 16, 0, 17, 0, 9, 0, 17, 0, 10, 0, 9, 0, 17, 0, 18, 0, 10, 0, 18, 0, 11, 0, 10, 0, 18, 0, 19, 0, 11, 0, 19, 0, 12, 0, 11, 0, 19, 0, 20, 0, 12, 0, 20, 0, 13, 0, 12, 0, 21, 0, 22, 0, 14, 0, 22, 0, 15, 0, 14, 0, 22, 0, 23, 0, 15, 0, 23, 0, 16, 0, 15, 0, 23, 0, 24, 0, 16, 0, 24, 0, 17, 0, 16, 0, 24, 0, 25, 0, 17, 0, 25, 0, 18, 0, 17, 0, 25, 0, 26, 0, 18, 0, 26, 0, 19, 0, 18, 0, 26, 0, 27, 0, 19, 0, 27, 0, 20, 0, 19, 0, 28, 0, 29, 0, 21, 0, 29, 0, 22, 0, 21, 0, 29, 0, 30, 0, 22, 0, 30, 0, 23, 0, 22, 0, 30, 0, 31, 0, 23, 0, 31, 0, 24, 0, 23, 0, 31, 0, 32, 0, 24, 0, 32, 0, 25, 0, 24, 0, 32, 0, 33, 0, 25, 0, 33, 0, 26, 0, 25, 0, 33, 0, 34, 0, 26, 0, 34, 0, 27, 0, 26, 0, 35, 0, 36, 0, 28, 0, 36, 0, 29, 0, 28, 0, 36, 0, 37, 0, 29, 0, 37, 0, 30, 0, 29, 0, 37, 0, 38, 0, 30, 0, 38, 0, 31, 0, 30, 0, 38, 0, 39, 0, 31, 0, 39, 0, 32, 0, 31, 0, 39, 0, 40, 0, 32, 0, 40, 0, 33, 0, 32, 0, 40, 0, 41, 0, 33, 0, 41, 0, 34, 0, 33, 0, 42, 0, 43, 0, 35, 0, 43, 0, 36, 0, 35, 0, 43, 0, 44, 0, 36, 0, 44, 0, 37, 0, 36, 0, 44, 0, 45, 0, 37, 0, 45, 0, 38, 0, 37, 0, 45, 0, 46, 0, 38, 0, 46, 0, 39, 0, 38, 0, 46, 0, 47, 0, 39, 0, 47, 0, 40, 0, 39, 0, 47, 0, 48, 0, 40, 0, 48, 0, 41, 0, 40, 0),
"material": SubResource("ShaderMaterial_e8otq"),
"primitive": 3,
"uv_scale": Vector4(0, 0, 0, 0),
"vertex_count": 49,
"vertex_data": PackedByteArray(58, 205, 19, 191, 58, 205, 19, 63, 58, 205, 19, 63, 195, 18, 39, 191, 195, 18, 39, 63, 162, 17, 197, 62, 176, 162, 49, 191, 176, 162, 49, 63, 162, 17, 69, 62, 74, 66, 61, 191, 74, 66, 61, 63, 0, 0, 0, 0, 93, 122, 64, 191, 93, 122, 64, 63, 0, 137, 85, 190, 195, 18, 39, 191, 195, 18, 39, 63, 162, 17, 197, 190, 58, 205, 19, 191, 58, 205, 19, 63, 58, 205, 19, 191, 195, 18, 39, 191, 162, 17, 197, 62, 195, 18, 39, 63, 75, 205, 73, 191, 173, 195, 222, 62, 173, 195, 222, 62, 4, 6, 92, 191, 234, 216, 236, 62, 173, 195, 94, 62, 105, 178, 129, 191, 222, 166, 10, 63, 0, 0, 0, 0, 93, 39, 128, 191, 239, 243, 9, 63, 14, 192, 129, 190, 75, 205, 73, 191, 173, 195, 222, 62, 173, 195, 222, 190, 195, 18, 39, 191, 162, 17, 197, 62, 195, 18, 39, 191, 176, 162, 49, 191, 162, 17, 69, 62, 176, 162, 49, 63, 4, 6, 92, 191, 173, 195, 94, 62, 234, 216, 236, 62, 204, 234, 113, 191, 234, 216, 108, 62, 234, 216, 108, 62, 147, 43, 136, 191, 193, 26, 132, 62, 0, 0, 0, 0, 220, 198, 143, 191, 127, 195, 140, 62, 129, 195, 140, 190, 192, 199, 107, 191, 168, 183, 110, 62, 21, 207, 253, 190, 164, 66, 67, 191, 49, 159, 88, 62, 164, 66, 67, 191, 243, 4, 53, 191, 0, 0, 0, 0, 243, 4, 53, 63, 82, 197, 97, 191, 0, 0, 0, 0, 238, 91, 241, 62, 119, 255, 124, 191, 0, 0, 0, 0, 171, 113, 117, 62, 124, 183, 146, 191, 0, 0, 0, 0, 0, 0, 0, 0, 183, 82, 135, 191, 0, 0, 0, 0, 96, 72, 131, 190, 244, 225, 130, 191, 0, 0, 0, 0, 94, 235, 11, 191, 138, 24, 72, 191, 0, 0, 0, 0, 138, 24, 72, 191, 224, 31, 56, 191, 144, 68, 76, 190, 224, 31, 56, 63, 161, 223, 92, 191, 3, 160, 95, 190, 43, 195, 237, 62, 250, 11, 131, 191, 235, 76, 128, 190, 233, 76, 128, 62, 149, 60, 141, 191, 11, 5, 137, 190, 0, 0, 0, 0, 27, 3, 124, 191, 18, 187, 118, 190, 18, 187, 118, 190, 162, 65, 112, 191, 212, 63, 115, 190, 75, 80, 1, 191, 80, 111, 76, 191, 210, 204, 98, 190, 80, 111, 76, 191, 195, 18, 39, 191, 162, 17, 197, 190, 195, 18, 39, 63, 26, 185, 78, 191, 89, 50, 228, 190, 89, 50, 228, 62, 237, 98, 124, 191, 169, 215, 7, 191, 203, 135, 127, 62, 180, 83, 129, 191, 159, 65, 10, 191, 0, 0, 0, 0, 146, 135, 101, 191, 140, 20, 247, 190, 142, 99, 104, 190, 127, 94, 90, 191, 112, 13, 241, 190, 112, 13, 241, 190, 206, 35, 67, 191, 166, 44, 230, 190, 206, 35, 67, 191, 58, 205, 19, 191, 58, 205, 19, 191, 58, 205, 19, 63, 195, 18, 39, 191, 195, 18, 39, 191, 162, 17, 197, 62, 241, 16, 73, 191, 241, 16, 73, 191, 25, 16, 95, 62, 118, 178, 55, 191, 118, 178, 55, 191, 0, 0, 0, 0, 24, 36, 50, 191, 24, 36, 50, 191, 52, 161, 69, 190, 195, 18, 39, 191, 195, 18, 39, 191, 162, 17, 197, 190, 210, 33, 20, 191, 210, 33, 20, 191, 210, 33, 20, 191, 113, 76, 56, 166, 23, 136, 192, 164, 215, 70, 248, 170, 234, 123, 249, 165, 94, 79, 255, 174, 167, 117, 213, 164, 125, 76, 41, 195, 121, 80, 23, 171, 183, 49, 169, 214, 0, 58, 232, 161, 38, 38, 10, 207, 129, 71, 19, 163, 253, 35, 250, 199, 237, 77, 246, 166, 215, 70, 222, 155, 109, 150, 6, 169, 1, 67, 128, 161, 51, 141, 78, 169, 146, 67, 135, 159, 130, 144, 165, 169, 92, 64, 120, 168, 44, 126, 174, 167, 52, 47, 85, 207, 31, 67, 69, 165, 41, 42, 54, 216, 151, 62, 190, 157, 51, 42, 10, 208, 164, 68, 121, 163, 66, 62, 117, 141, 94, 162, 115, 173, 20, 58, 147, 146, 97, 156, 52, 175, 35, 57, 83, 150, 218, 151, 16, 175, 153, 41, 59, 143, 246, 149, 51, 181, 64, 16, 128, 164, 133, 105, 237, 181, 29, 31, 207, 206, 84, 75, 194, 161, 154, 35, 115, 201, 210, 76, 21, 166, 17, 53, 73, 130, 153, 167, 170, 177, 154, 52, 40, 132, 50, 166, 4, 178, 223, 47, 183, 136, 129, 160, 38, 180, 248, 13, 116, 131, 79, 138, 205, 189, 202, 18, 197, 95, 115, 111, 42, 200, 44, 0, 152, 174, 129, 89, 242, 180, 163, 18, 212, 197, 1, 83, 238, 166, 44, 61, 39, 111, 95, 175, 145, 184, 253, 59, 8, 118, 174, 173, 97, 179, 32, 43, 178, 121, 78, 164, 42, 187, 30, 21, 173, 102, 198, 119, 18, 202, 44, 25, 162, 77, 164, 96, 252, 199, 228, 27, 195, 76, 72, 97, 137, 201, 25, 14, 87, 69, 191, 84, 95, 185, 233, 80, 125, 89, 15, 187, 223, 192, 210, 81, 78, 95, 99, 186, 254, 169, 176, 64, 87, 90, 153, 135, 110, 213, 119, 49, 5, 69, 239, 93, 61, 210, 107, 40, 202, 59, 60, 84, 234, 202, 202, 48, 29, 59, 153, 84, 21, 207, 100, 41, 199, 60, 135, 85, 244, 203, 251, 71, 1, 92, 22, 156, 10, 206, 235, 86, 133, 87, 212, 189, 9, 146, 64, 77, 126, 81, 157, 103, 160, 220, 43, 64, 21, 51, 9, 74, 159, 209, 152, 56, 156, 46, 248, 71, 0, 205, 166, 57, 185, 46, 238, 71, 132, 205, 143, 66, 29, 36, 62, 60, 42, 203)
}]

[sub_resource type="ConcavePolygonShape3D" id="ConcavePolygonShape3D_bwd6h"]
data = PackedVector3Array(-0.6526, 0.3849, 0.6526, -0.7883, 0.4351, 0.4351, -0.5774, 0.5774, 0.5774, -0.7883, 0.4351, 0.4351, -0.6526, 0.6526, 0.3849, -0.5774, 0.5774, 0.5774, -0.7883, 0.4351, 0.4351, -0.8595, 0.4626, 0.2175, -0.6526, 0.6526, 0.3849, -0.8595, 0.4626, 0.2175, -0.6939, 0.6939, 0.1925, -0.6526, 0.6526, 0.3849, -0.8595, 0.4626, 0.2175, -1.0133, 0.5416, 0, -0.6939, 0.6939, 0.1925, -1.0133, 0.5416, 0, -0.7393, 0.7393, 0, -0.6939, 0.6939, 0.1925, -1.0133, 0.5416, 0, -1.0012, 0.5389, -0.2534, -0.7393, 0.7393, 0, -1.0012, 0.5389, -0.2534, -0.7519, 0.7519, -0.2085, -0.7393, 0.7393, 0, -1.0012, 0.5389, -0.2534, -0.7883, 0.4351, -0.4351, -0.7519, 0.7519, -0.2085, -0.7883, 0.4351, -0.4351, -0.6526, 0.6526, -0.3849, -0.7519, 0.7519, -0.2085, -0.7883, 0.4351, -0.4351, -0.6526, 0.3849, -0.6526, -0.6526, 0.6526, -0.3849, -0.6526, 0.3849, -0.6526, -0.5774, 0.5774, -0.5774, -0.6526, 0.6526, -0.3849, -0.6939, 0.1925, 0.6939, -0.8595, 0.2175, 0.4626, -0.6526, 0.3849, 0.6526, -0.8595, 0.2175, 0.4626, -0.7883, 0.4351, 0.4351, -0.6526, 0.3849, 0.6526, -0.8595, 0.2175, 0.4626, -0.945, 0.2313, 0.2313, -0.7883, 0.4351, 0.4351, -0.945, 0.2313, 0.2313, -0.8595, 0.4626, 0.2175, -0.7883, 0.4351, 0.4351, -0.945, 0.2313, 0.2313, -1.0638, 0.258, 0, -0.8595, 0.4626, 0.2175, -1.0638, 0.258, 0, -1.0133, 0.5416, 0, -0.8595, 0.4626, 0.2175, -1.0638, 0.258, 0, -1.1233, 0.2749, -0.2749, -1.0133, 0.5416, 0, -1.1233, 0.2749, -0.2749, -1.0012, 0.5389, -0.2534, -1.0133, 0.5416, 0, -1.1233, 0.2749, -0.2749, -0.921, 0.2331, -0.4957, -1.0012, 0.5389, -0.2534, -0.921, 0.2331, -0.4957, -0.7883, 0.4351, -0.4351, -1.0012, 0.5389, -0.2534, -0.921, 0.2331, -0.4957, -0.7627, 0.2115, -0.7627, -0.7883, 0.4351, -0.4351, -0.7627, 0.2115, -0.7627, -0.6526, 0.3849, -0.6526, -0.7883, 0.4351, -0.4351, -0.7071, 0, 0.7071, -0.8819, 0, 0.4714, -0.6939, 0.1925, 0.6939, -0.8819, 0, 0.4714, -0.8595, 0.2175, 0.4626, -0.6939, 0.1925, 0.6939, -0.8819, 0, 0.4714, -0.9883, 0, 0.2397, -0.8595, 0.2175, 0.4626, -0.9883, 0, 0.2397, -0.945, 0.2313, 0.2313, -0.8595, 0.2175, 0.4626, -0.9883, 0, 0.2397, -1.1462, 0, 0, -0.945, 0.2313, 0.2313, -1.1462, 0, 0, -1.0638, 0.258, 0, -0.945, 0.2313, 0.2313, -1.1462, 0, 0, -1.0572, 0, -0.2564, -1.0638, 0.258, 0, -1.0572, 0, -0.2564, -1.1233, 0.2749, -0.2749, -1.0638, 0.258, 0, -1.0572, 0, -0.2564, -1.0225, 0, -0.5466, -1.1233, 0.2749, -0.2749, -1.0225, 0, -0.5466, -0.921, 0.2331, -0.4957, -1.1233, 0.2749, -0.2749, -1.0225, 0, -0.5466, -0.7816, 0, -0.7816, -0.921, 0.2331, -0.4957, -0.7816, 0, -0.7816, -0.7627, 0.2115, -0.7627, -0.921, 0.2331, -0.4957, -0.7192, -0.1995, 0.7192, -0.8628, -0.2184, 0.4644, -0.7071, 0, 0.7071, -0.8628, -0.2184, 0.4644, -0.8819, 0, 0.4714, -0.7071, 0, 0.7071, -0.8628, -0.2184, 0.4644, -1.0238, -0.2506, 0.2506, -0.8819, 0, 0.4714, -1.0238, -0.2506, 0.2506, -0.9883, 0, 0.2397, -0.8819, 0, 0.4714, -1.0238, -0.2506, 0.2506, -1.1034, -0.2676, 0, -0.9883, 0, 0.2397, -1.1034, -0.2676, 0, -1.1462, 0, 0, -0.9883, 0, 0.2397, -1.1034, -0.2676, 0, -0.9844, -0.2409, -0.2409, -1.1462, 0, 0, -0.9844, -0.2409, -0.2409, -1.0572, 0, -0.2564, -1.1462, 0, 0, -0.9844, -0.2409, -0.2409, -0.9385, -0.2375, -0.5051, -1.0572, 0, -0.2564, -0.9385, -0.2375, -0.5051, -1.0225, 0, -0.5466, -1.0572, 0, -0.2564, -0.9385, -0.2375, -0.5051, -0.7986, -0.2215, -0.7986, -1.0225, 0, -0.5466, -0.7986, -0.2215, -0.7986, -0.7816, 0, -0.7816, -1.0225, 0, -0.5466, -0.6526, -0.3849, 0.6526, -0.8075, -0.4457, 0.4457, -0.7192, -0.1995, 0.7192, -0.8075, -0.4457, 0.4457, -0.8628, -0.2184, 0.4644, -0.7192, -0.1995, 0.7192, -0.8075, -0.4457, 0.4457, -0.9859, -0.5306, 0.2495, -0.8628, -0.2184, 0.4644, -0.9859, -0.5306, 0.2495, -1.0238, -0.2506, 0.2506, -0.8628, -0.2184, 0.4644, -0.9859, -0.5306, 0.2495, -1.0104, -0.5401, 0, -1.0238, -0.2506, 0.2506, -1.0104, -0.5401, 0, -1.1034, -0.2676, 0, -1.0238, -0.2506, 0.2506, -1.0104, -0.5401, 0, -0.8966, -0.4826, -0.2269, -1.1034, -0.2676, 0, -0.8966, -0.4826, -0.2269, -0.9844, -0.2409, -0.2409, -1.1034, -0.2676, 0, -0.8966, -0.4826, -0.2269, -0.853, -0.4708, -0.4708, -0.9844, -0.2409, -0.2409, -0.853, -0.4708, -0.4708, -0.9385, -0.2375, -0.5051, -0.9844, -0.2409, -0.2409, -0.853, -0.4708, -0.4708, -0.7623, -0.4496, -0.7623, -0.9385, -0.2375, -0.5051, -0.7623, -0.4496, -0.7623, -0.7986, -0.2215, -0.7986, -0.9385, -0.2375, -0.5051, -0.5774, -0.5774, 0.5774, -0.6526, -0.6526, 0.3849, -0.6526, -0.3849, 0.6526, -0.6526, -0.6526, 0.3849, -0.8075, -0.4457, 0.4457, -0.6526, -0.3849, 0.6526, -0.6526, -0.6526, 0.3849, -0.7854, -0.7854, 0.2178, -0.8075, -0.4457, 0.4457, -0.7854, -0.7854, 0.2178, -0.9859, -0.5306, 0.2495, -0.8075, -0.4457, 0.4457, -0.7854, -0.7854, 0.2178, -0.7176, -0.7176, 0, -0.9859, -0.5306, 0.2495, -0.7176, -0.7176, 0, -1.0104, -0.5401, 0, -0.9859, -0.5306, 0.2495, -0.7176, -0.7176, 0, -0.6959, -0.6959, -0.193, -1.0104, -0.5401, 0, -0.6959, -0.6959, -0.193, -0.8966, -0.4826, -0.2269, -1.0104, -0.5401, 0, -0.6959, -0.6959, -0.193, -0.6526, -0.6526, -0.3849, -0.8966, -0.4826, -0.2269, -0.6526, -0.6526, -0.3849, -0.853, -0.4708, -0.4708, -0.8966, -0.4826, -0.2269, -0.6526, -0.6526, -0.3849, -0.5786, -0.5786, -0.5786, -0.853, -0.4708, -0.4708, -0.5786, -0.5786, -0.5786, -0.7623, -0.4496, -0.7623, -0.853, -0.4708, -0.4708)

[sub_resource type="Shader" id="Shader_nm3br"]
code = "shader_type spatial;

// use uniforms to pass values between code and shaders
uniform float min_height;
uniform float max_height;
// gradient texture to assign colours to planet regions
uniform sampler2D height_colour;

// variable interpolated between vertices
varying float height;

void vertex() {
	// given the origin of the mesh is the centre of the planet,
	// the height is just the length of the current vertex in local space
	height = length(VERTEX);

}

void fragment() {
	// Called for every pixel the material is visible on.
	// linear interpolation of current height between min and max height
	// gives a value for the current height between 0 and 1
	float t = (height - min_height)/(max_height - min_height);
	
	// sample the height_colour texture - because it's a 1D gradient, always use y=0 and set x = t
	// get rgb to remove any alpha channel
	vec3 colour = texture(height_colour, vec2(t, 0.0)).rgb;
	
	// set colour
	ALBEDO = colour;
}

//void light() {
	// Called for every pixel for every light affecting the material.
	// Uncomment to replace the default light processing function with this one.
//}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_v8feu"]
resource_local_to_scene = true
render_priority = 0
shader = SubResource("Shader_nm3br")
shader_parameter/min_height = 1.0
shader_parameter/max_height = 1.27799
shader_parameter/height_colour = ExtResource("2_k0a6c")

[sub_resource type="ArrayMesh" id="ArrayMesh_5twgj"]
_surfaces = [{
"aabb": AABB(0.581312, -0.770635, -0.717779, 0.441844, 1.47774, 1.49293),
"attribute_data": PackedByteArray(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
"format": 34359742487,
"index_count": 216,
"index_data": PackedByteArray(7, 0, 8, 0, 0, 0, 8, 0, 1, 0, 0, 0, 8, 0, 9, 0, 1, 0, 9, 0, 2, 0, 1, 0, 9, 0, 10, 0, 2, 0, 10, 0, 3, 0, 2, 0, 10, 0, 11, 0, 3, 0, 11, 0, 4, 0, 3, 0, 11, 0, 12, 0, 4, 0, 12, 0, 5, 0, 4, 0, 12, 0, 13, 0, 5, 0, 13, 0, 6, 0, 5, 0, 14, 0, 15, 0, 7, 0, 15, 0, 8, 0, 7, 0, 15, 0, 16, 0, 8, 0, 16, 0, 9, 0, 8, 0, 16, 0, 17, 0, 9, 0, 17, 0, 10, 0, 9, 0, 17, 0, 18, 0, 10, 0, 18, 0, 11, 0, 10, 0, 18, 0, 19, 0, 11, 0, 19, 0, 12, 0, 11, 0, 19, 0, 20, 0, 12, 0, 20, 0, 13, 0, 12, 0, 21, 0, 22, 0, 14, 0, 22, 0, 15, 0, 14, 0, 22, 0, 23, 0, 15, 0, 23, 0, 16, 0, 15, 0, 23, 0, 24, 0, 16, 0, 24, 0, 17, 0, 16, 0, 24, 0, 25, 0, 17, 0, 25, 0, 18, 0, 17, 0, 25, 0, 26, 0, 18, 0, 26, 0, 19, 0, 18, 0, 26, 0, 27, 0, 19, 0, 27, 0, 20, 0, 19, 0, 28, 0, 29, 0, 21, 0, 29, 0, 22, 0, 21, 0, 29, 0, 30, 0, 22, 0, 30, 0, 23, 0, 22, 0, 30, 0, 31, 0, 23, 0, 31, 0, 24, 0, 23, 0, 31, 0, 32, 0, 24, 0, 32, 0, 25, 0, 24, 0, 32, 0, 33, 0, 25, 0, 33, 0, 26, 0, 25, 0, 33, 0, 34, 0, 26, 0, 34, 0, 27, 0, 26, 0, 35, 0, 36, 0, 28, 0, 36, 0, 29, 0, 28, 0, 36, 0, 37, 0, 29, 0, 37, 0, 30, 0, 29, 0, 37, 0, 38, 0, 30, 0, 38, 0, 31, 0, 30, 0, 38, 0, 39, 0, 31, 0, 39, 0, 32, 0, 31, 0, 39, 0, 40, 0, 32, 0, 40, 0, 33, 0, 32, 0, 40, 0, 41, 0, 33, 0, 41, 0, 34, 0, 33, 0, 42, 0, 43, 0, 35, 0, 43, 0, 36, 0, 35, 0, 43, 0, 44, 0, 36, 0, 44, 0, 37, 0, 36, 0, 44, 0, 45, 0, 37, 0, 45, 0, 38, 0, 37, 0, 45, 0, 46, 0, 38, 0, 46, 0, 39, 0, 38, 0, 46, 0, 47, 0, 39, 0, 47, 0, 40, 0, 39, 0, 47, 0, 48, 0, 40, 0, 48, 0, 41, 0, 40, 0),
"material": SubResource("ShaderMaterial_v8feu"),
"primitive": 3,
"uv_scale": Vector4(0, 0, 0, 0),
"vertex_count": 49,
"vertex_data": PackedByteArray(131, 237, 28, 63, 131, 237, 28, 63, 131, 237, 28, 191, 160, 108, 45, 63, 160, 108, 45, 63, 102, 143, 204, 190, 176, 162, 49, 63, 176, 162, 49, 63, 162, 17, 69, 190, 243, 4, 53, 63, 243, 4, 53, 63, 0, 0, 0, 0, 176, 162, 49, 63, 176, 162, 49, 63, 164, 17, 69, 62, 195, 18, 39, 63, 195, 18, 39, 63, 162, 17, 197, 62, 34, 126, 25, 63, 34, 126, 25, 63, 34, 126, 25, 63, 195, 18, 39, 63, 162, 17, 197, 62, 195, 18, 39, 191, 75, 205, 73, 63, 173, 195, 222, 62, 173, 195, 222, 190, 4, 6, 92, 63, 234, 216, 236, 62, 173, 195, 94, 190, 82, 197, 97, 63, 238, 91, 241, 62, 0, 0, 0, 0, 57, 186, 116, 63, 89, 184, 3, 63, 173, 198, 119, 62, 32, 98, 111, 63, 241, 31, 4, 63, 241, 31, 4, 63, 127, 112, 70, 63, 254, 16, 234, 62, 127, 112, 70, 63, 176, 162, 49, 63, 162, 17, 69, 62, 176, 162, 49, 191, 16, 33, 97, 63, 1, 239, 99, 62, 231, 87, 242, 190, 204, 234, 113, 63, 234, 216, 108, 62, 234, 216, 108, 190, 124, 172, 128, 63, 237, 169, 121, 62, 0, 0, 0, 0, 24, 240, 125, 63, 184, 157, 120, 62, 188, 157, 120, 62, 75, 239, 111, 63, 115, 236, 114, 62, 249, 35, 1, 63, 67, 213, 67, 63, 219, 65, 89, 62, 67, 213, 67, 63, 243, 4, 53, 63, 0, 0, 0, 0, 243, 4, 53, 191, 157, 146, 113, 63, 0, 0, 0, 0, 68, 32, 1, 191, 199, 246, 130, 63, 0, 0, 0, 0, 128, 27, 126, 190, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 0, 0, 139, 201, 120, 63, 0, 0, 0, 0, 241, 91, 113, 62, 82, 197, 97, 63, 0, 0, 0, 0, 238, 91, 241, 62, 243, 4, 53, 63, 0, 0, 0, 0, 243, 4, 53, 63, 177, 23, 52, 63, 117, 203, 71, 190, 177, 23, 52, 191, 149, 15, 114, 63, 137, 19, 117, 190, 238, 72, 2, 191, 241, 11, 126, 63, 255, 184, 120, 190, 252, 184, 120, 190, 139, 201, 120, 63, 241, 91, 113, 190, 0, 0, 0, 0, 204, 234, 113, 63, 236, 216, 108, 190, 236, 216, 108, 62, 4, 6, 92, 63, 176, 195, 94, 190, 234, 216, 236, 62, 139, 221, 50, 63, 242, 110, 70, 190, 139, 221, 50, 63, 98, 192, 55, 63, 206, 189, 216, 190, 98, 192, 55, 191, 86, 72, 100, 63, 231, 254, 251, 190, 231, 254, 251, 190, 4, 6, 92, 63, 234, 216, 236, 190, 173, 195, 94, 190, 82, 197, 97, 63, 238, 91, 241, 190, 0, 0, 0, 0, 4, 6, 92, 63, 234, 216, 236, 190, 176, 195, 94, 62, 75, 205, 73, 63, 173, 195, 222, 190, 173, 195, 222, 62, 82, 89, 42, 63, 190, 238, 200, 190, 82, 89, 42, 63, 95, 69, 33, 63, 95, 69, 33, 191, 95, 69, 33, 191, 83, 72, 69, 63, 83, 72, 69, 191, 165, 179, 232, 190, 208, 243, 49, 63, 208, 243, 49, 191, 162, 107, 69, 190, 182, 29, 56, 63, 182, 29, 56, 191, 0, 0, 0, 0, 185, 31, 54, 63, 185, 31, 54, 191, 98, 12, 74, 62, 195, 18, 39, 63, 195, 18, 39, 191, 162, 17, 197, 62, 216, 208, 20, 63, 216, 208, 20, 191, 216, 208, 20, 63, 118, 229, 133, 191, 97, 169, 54, 196, 221, 216, 91, 189, 225, 126, 149, 215, 152, 205, 86, 187, 59, 102, 154, 214, 131, 199, 105, 195, 146, 91, 201, 215, 91, 170, 220, 202, 201, 61, 175, 208, 0, 154, 233, 202, 3, 49, 151, 199, 246, 159, 171, 198, 102, 55, 25, 202, 145, 231, 171, 197, 175, 180, 248, 183, 169, 225, 68, 190, 106, 155, 81, 203, 239, 216, 118, 184, 3, 123, 28, 214, 133, 215, 133, 182, 142, 118, 162, 213, 97, 213, 114, 174, 49, 111, 86, 211, 53, 186, 108, 169, 207, 82, 200, 202, 13, 170, 247, 178, 4, 67, 228, 198, 168, 237, 151, 200, 55, 179, 130, 173, 149, 228, 215, 190, 44, 165, 84, 198, 192, 229, 24, 173, 84, 140, 214, 204, 217, 234, 249, 155, 123, 130, 224, 202, 71, 239, 109, 134, 87, 117, 188, 194, 152, 211, 12, 117, 189, 95, 191, 180, 156, 199, 161, 116, 76, 88, 46, 175, 103, 253, 208, 198, 94, 171, 231, 166, 10, 247, 240, 181, 238, 170, 3, 183, 75, 245, 221, 149, 92, 138, 227, 196, 13, 249, 199, 126, 69, 122, 65, 191, 116, 224, 24, 119, 65, 105, 27, 185, 244, 203, 173, 114, 82, 91, 58, 177, 27, 192, 214, 108, 99, 85, 186, 170, 139, 251, 108, 59, 124, 168, 160, 168, 126, 241, 54, 73, 214, 158, 226, 176, 1, 229, 97, 91, 181, 129, 135, 177, 164, 222, 164, 104, 193, 112, 49, 180, 162, 213, 209, 106, 158, 102, 78, 179, 191, 200, 201, 110, 75, 90, 99, 175, 40, 196, 218, 116, 184, 86, 59, 173, 68, 234, 19, 53, 50, 157, 67, 167, 158, 228, 38, 78, 106, 140, 174, 175, 154, 210, 239, 79, 72, 108, 152, 172, 80, 209, 138, 83, 136, 105, 37, 173, 201, 199, 38, 91, 139, 93, 16, 173, 25, 190, 181, 93, 142, 83, 217, 169, 52, 188, 8, 100, 147, 82, 164, 168, 210, 217, 223, 32, 128, 134, 192, 156, 158, 219, 68, 64, 109, 134, 39, 169, 34, 201, 52, 86, 196, 95, 192, 172, 232, 206, 86, 72, 168, 105, 62, 171, 235, 196, 114, 84, 18, 91, 209, 171, 132, 185, 91, 87, 102, 78, 58, 168, 253, 180, 212, 87, 16, 74, 241, 165)
}]

[sub_resource type="ConcavePolygonShape3D" id="ConcavePolygonShape3D_jgp0f"]
data = PackedVector3Array(0.6526, 0.3849, -0.6526, 0.7883, 0.4351, -0.4351, 0.613, 0.613, -0.613, 0.7883, 0.4351, -0.4351, 0.6774, 0.6774, -0.3995, 0.613, 0.613, -0.613, 0.7883, 0.4351, -0.4351, 0.8595, 0.4626, -0.2175, 0.6774, 0.6774, -0.3995, 0.8595, 0.4626, -0.2175, 0.6939, 0.6939, -0.1925, 0.6774, 0.6774, -0.3995, 0.8595, 0.4626, -0.2175, 0.8819, 0.4714, 0, 0.6939, 0.6939, -0.1925, 0.8819, 0.4714, 0, 0.7071, 0.7071, 0, 0.6939, 0.6939, -0.1925, 0.8819, 0.4714, 0, 0.956, 0.5145, 0.242, 0.7071, 0.7071, 0, 0.956, 0.5145, 0.242, 0.6939, 0.6939, 0.1925, 0.7071, 0.7071, 0, 0.956, 0.5145, 0.242, 0.9351, 0.5161, 0.5161, 0.6939, 0.6939, 0.1925, 0.9351, 0.5161, 0.5161, 0.6526, 0.6526, 0.3849, 0.6939, 0.6939, 0.1925, 0.9351, 0.5161, 0.5161, 0.7752, 0.4572, 0.7752, 0.6526, 0.6526, 0.3849, 0.7752, 0.4572, 0.7752, 0.5996, 0.5996, 0.5996, 0.6526, 0.6526, 0.3849, 0.6939, 0.1925, -0.6939, 0.8794, 0.2226, -0.4733, 0.6526, 0.3849, -0.6526, 0.8794, 0.2226, -0.4733, 0.7883, 0.4351, -0.4351, 0.6526, 0.3849, -0.6526, 0.8794, 0.2226, -0.4733, 0.945, 0.2313, -0.2313, 0.7883, 0.4351, -0.4351, 0.945, 0.2313, -0.2313, 0.8595, 0.4626, -0.2175, 0.7883, 0.4351, -0.4351, 0.945, 0.2313, -0.2313, 1.0053, 0.2438, 0, 0.8595, 0.4626, -0.2175, 1.0053, 0.2438, 0, 0.8819, 0.4714, 0, 0.8595, 0.4626, -0.2175, 1.0053, 0.2438, 0, 0.9919, 0.2428, 0.2428, 0.8819, 0.4714, 0, 0.9919, 0.2428, 0.2428, 0.956, 0.5145, 0.242, 0.8819, 0.4714, 0, 0.9919, 0.2428, 0.2428, 0.9372, 0.2372, 0.5045, 0.956, 0.5145, 0.242, 0.9372, 0.2372, 0.5045, 0.9351, 0.5161, 0.5161, 0.956, 0.5145, 0.242, 0.9372, 0.2372, 0.5045, 0.765, 0.2122, 0.765, 0.9351, 0.5161, 0.5161, 0.765, 0.2122, 0.765, 0.7752, 0.4572, 0.7752, 0.9351, 0.5161, 0.5161, 0.7071, 0, -0.7071, 0.9436, 0, -0.5044, 0.6939, 0.1925, -0.6939, 0.9436, 0, -0.5044, 0.8794, 0.2226, -0.4733, 0.6939, 0.1925, -0.6939, 0.9436, 0, -0.5044, 1.0232, 0, -0.2482, 0.8794, 0.2226, -0.4733, 1.0232, 0, -0.2482, 0.945, 0.2313, -0.2313, 0.8794, 0.2226, -0.4733, 1.0232, 0, -0.2482, 1, 0, 0, 0.945, 0.2313, -0.2313, 1, 0, 0, 1.0053, 0.2438, 0, 0.945, 0.2313, -0.2313, 1, 0, 0, 0.9718, 0, 0.2357, 1.0053, 0.2438, 0, 0.9718, 0, 0.2357, 0.9919, 0.2428, 0.2428, 1.0053, 0.2438, 0, 0.9718, 0, 0.2357, 0.8819, 0, 0.4714, 0.9919, 0.2428, 0.2428, 0.8819, 0, 0.4714, 0.9372, 0.2372, 0.5045, 0.9919, 0.2428, 0.2428, 0.8819, 0, 0.4714, 0.7071, 0, 0.7071, 0.9372, 0.2372, 0.5045, 0.7071, 0, 0.7071, 0.765, 0.2122, 0.765, 0.9372, 0.2372, 0.5045, 0.7035, -0.1951, -0.7035, 0.9456, -0.2393, -0.5089, 0.7071, 0, -0.7071, 0.9456, -0.2393, -0.5089, 0.9436, 0, -0.5044, 0.7071, 0, -0.7071, 0.9456, -0.2393, -0.5089, 0.9924, -0.2429, -0.2429, 0.9436, 0, -0.5044, 0.9924, -0.2429, -0.2429, 1.0232, 0, -0.2482, 0.9436, 0, -0.5044, 0.9924, -0.2429, -0.2429, 0.9718, -0.2357, 0, 1.0232, 0, -0.2482, 0.9718, -0.2357, 0, 1, 0, 0, 1.0232, 0, -0.2482, 0.9718, -0.2357, 0, 0.945, -0.2313, 0.2313, 1, 0, 0, 0.945, -0.2313, 0.2313, 0.9718, 0, 0.2357, 1, 0, 0, 0.945, -0.2313, 0.2313, 0.8595, -0.2175, 0.4626, 0.9718, 0, 0.2357, 0.8595, -0.2175, 0.4626, 0.8819, 0, 0.4714, 0.9718, 0, 0.2357, 0.8595, -0.2175, 0.4626, 0.6987, -0.1938, 0.6987, 0.8819, 0, 0.4714, 0.6987, -0.1938, 0.6987, 0.7071, 0, 0.7071, 0.8819, 0, 0.4714, 0.7178, -0.4233, -0.7178, 0.8917, -0.4922, -0.4922, 0.7035, -0.1951, -0.7035, 0.8917, -0.4922, -0.4922, 0.9456, -0.2393, -0.5089, 0.7035, -0.1951, -0.7035, 0.8917, -0.4922, -0.4922, 0.8595, -0.4626, -0.2175, 0.9456, -0.2393, -0.5089, 0.8595, -0.4626, -0.2175, 0.9924, -0.2429, -0.2429, 0.9456, -0.2393, -0.5089, 0.8595, -0.4626, -0.2175, 0.8819, -0.4714, 0, 0.9924, -0.2429, -0.2429, 0.8819, -0.4714, 0, 0.9718, -0.2357, 0, 0.9924, -0.2429, -0.2429, 0.8819, -0.4714, 0, 0.8595, -0.4626, 0.2175, 0.9718, -0.2357, 0, 0.8595, -0.4626, 0.2175, 0.945, -0.2313, 0.2313, 0.9718, -0.2357, 0, 0.8595, -0.4626, 0.2175, 0.7883, -0.4351, 0.4351, 0.945, -0.2313, 0.2313, 0.7883, -0.4351, 0.4351, 0.8595, -0.2175, 0.4626, 0.945, -0.2313, 0.2313, 0.7883, -0.4351, 0.4351, 0.6654, -0.3924, 0.6654, 0.8595, -0.2175, 0.4626, 0.6654, -0.3924, 0.6654, 0.6987, -0.1938, 0.6987, 0.8595, -0.2175, 0.4626, 0.63, -0.63, -0.63, 0.7706, -0.7706, -0.4545, 0.7178, -0.4233, -0.7178, 0.7706, -0.7706, -0.4545, 0.8917, -0.4922, -0.4922, 0.7178, -0.4233, -0.7178, 0.7706, -0.7706, -0.4545, 0.6951, -0.6951, -0.1928, 0.8917, -0.4922, -0.4922, 0.6951, -0.6951, -0.1928, 0.8595, -0.4626, -0.2175, 0.8917, -0.4922, -0.4922, 0.6951, -0.6951, -0.1928, 0.7192, -0.7192, 0, 0.8595, -0.4626, -0.2175, 0.7192, -0.7192, 0, 0.8819, -0.4714, 0, 0.8595, -0.4626, -0.2175, 0.7192, -0.7192, 0, 0.7114, -0.7114, 0.1973, 0.8819, -0.4714, 0, 0.7114, -0.7114, 0.1973, 0.8595, -0.4626, 0.2175, 0.8819, -0.4714, 0, 0.7114, -0.7114, 0.1973, 0.6526, -0.6526, 0.3849, 0.8595, -0.4626, 0.2175, 0.6526, -0.6526, 0.3849, 0.7883, -0.4351, 0.4351, 0.8595, -0.4626, 0.2175, 0.6526, -0.6526, 0.3849, 0.5813, -0.5813, 0.5813, 0.7883, -0.4351, 0.4351, 0.5813, -0.5813, 0.5813, 0.6654, -0.3924, 0.6654, 0.7883, -0.4351, 0.4351)

[sub_resource type="Shader" id="Shader_jei48"]
code = "shader_type spatial;

// use uniforms to pass values between code and shaders
uniform float min_height;
uniform float max_height;
// gradient texture to assign colours to planet regions
uniform sampler2D height_colour;

// variable interpolated between vertices
varying float height;

void vertex() {
	// given the origin of the mesh is the centre of the planet,
	// the height is just the length of the current vertex in local space
	height = length(VERTEX);

}

void fragment() {
	// Called for every pixel the material is visible on.
	// linear interpolation of current height between min and max height
	// gives a value for the current height between 0 and 1
	float t = (height - min_height)/(max_height - min_height);
	
	// sample the height_colour texture - because it's a 1D gradient, always use y=0 and set x = t
	// get rgb to remove any alpha channel
	vec3 colour = texture(height_colour, vec2(t, 0.0)).rgb;
	
	// set colour
	ALBEDO = colour;
}

//void light() {
	// Called for every pixel for every light affecting the material.
	// Uncomment to replace the default light processing function with this one.
//}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_04acc"]
resource_local_to_scene = true
render_priority = 0
shader = SubResource("Shader_jei48")
shader_parameter/min_height = 1.0
shader_parameter/max_height = 1.27799
shader_parameter/height_colour = ExtResource("2_k0a6c")

[sub_resource type="ArrayMesh" id="ArrayMesh_gj8ds"]
_surfaces = [{
"aabb": AABB(-0.798573, -0.716306, -1.22711, 1.51635, 1.44252, 0.649755),
"attribute_data": PackedByteArray(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
"format": 34359742487,
"index_count": 216,
"index_data": PackedByteArray(7, 0, 8, 0, 0, 0, 8, 0, 1, 0, 0, 0, 8, 0, 9, 0, 1, 0, 9, 0, 2, 0, 1, 0, 9, 0, 10, 0, 2, 0, 10, 0, 3, 0, 2, 0, 10, 0, 11, 0, 3, 0, 11, 0, 4, 0, 3, 0, 11, 0, 12, 0, 4, 0, 12, 0, 5, 0, 4, 0, 12, 0, 13, 0, 5, 0, 13, 0, 6, 0, 5, 0, 14, 0, 15, 0, 7, 0, 15, 0, 8, 0, 7, 0, 15, 0, 16, 0, 8, 0, 16, 0, 9, 0, 8, 0, 16, 0, 17, 0, 9, 0, 17, 0, 10, 0, 9, 0, 17, 0, 18, 0, 10, 0, 18, 0, 11, 0, 10, 0, 18, 0, 19, 0, 11, 0, 19, 0, 12, 0, 11, 0, 19, 0, 20, 0, 12, 0, 20, 0, 13, 0, 12, 0, 21, 0, 22, 0, 14, 0, 22, 0, 15, 0, 14, 0, 22, 0, 23, 0, 15, 0, 23, 0, 16, 0, 15, 0, 23, 0, 24, 0, 16, 0, 24, 0, 17, 0, 16, 0, 24, 0, 25, 0, 17, 0, 25, 0, 18, 0, 17, 0, 25, 0, 26, 0, 18, 0, 26, 0, 19, 0, 18, 0, 26, 0, 27, 0, 19, 0, 27, 0, 20, 0, 19, 0, 28, 0, 29, 0, 21, 0, 29, 0, 22, 0, 21, 0, 29, 0, 30, 0, 22, 0, 30, 0, 23, 0, 22, 0, 30, 0, 31, 0, 23, 0, 31, 0, 24, 0, 23, 0, 31, 0, 32, 0, 24, 0, 32, 0, 25, 0, 24, 0, 32, 0, 33, 0, 25, 0, 33, 0, 26, 0, 25, 0, 33, 0, 34, 0, 26, 0, 34, 0, 27, 0, 26, 0, 35, 0, 36, 0, 28, 0, 36, 0, 29, 0, 28, 0, 36, 0, 37, 0, 29, 0, 37, 0, 30, 0, 29, 0, 37, 0, 38, 0, 30, 0, 38, 0, 31, 0, 30, 0, 38, 0, 39, 0, 31, 0, 39, 0, 32, 0, 31, 0, 39, 0, 40, 0, 32, 0, 40, 0, 33, 0, 32, 0, 40, 0, 41, 0, 33, 0, 41, 0, 34, 0, 33, 0, 42, 0, 43, 0, 35, 0, 43, 0, 36, 0, 35, 0, 43, 0, 44, 0, 36, 0, 44, 0, 37, 0, 36, 0, 44, 0, 45, 0, 37, 0, 45, 0, 38, 0, 37, 0, 45, 0, 46, 0, 38, 0, 46, 0, 39, 0, 38, 0, 46, 0, 47, 0, 39, 0, 47, 0, 40, 0, 39, 0, 47, 0, 48, 0, 40, 0, 48, 0, 41, 0, 40, 0),
"material": SubResource("ShaderMaterial_04acc"),
"primitive": 3,
"uv_scale": Vector4(0, 0, 0, 0),
"vertex_count": 49,
"vertex_data": PackedByteArray(131, 237, 28, 63, 131, 237, 28, 63, 131, 237, 28, 191, 195, 18, 39, 63, 162, 17, 197, 62, 195, 18, 39, 191, 176, 162, 49, 63, 162, 17, 69, 62, 176, 162, 49, 191, 243, 4, 53, 63, 0, 0, 0, 0, 243, 4, 53, 191, 177, 23, 52, 63, 117, 203, 71, 190, 177, 23, 52, 191, 98, 192, 55, 63, 206, 189, 216, 190, 98, 192, 55, 191, 95, 69, 33, 63, 95, 69, 33, 191, 95, 69, 33, 191, 182, 73, 219, 62, 17, 233, 57, 63, 17, 233, 57, 191, 173, 195, 222, 62, 173, 195, 222, 62, 75, 205, 73, 191, 234, 216, 236, 62, 173, 195, 94, 62, 4, 6, 92, 191, 238, 91, 241, 62, 0, 0, 0, 0, 82, 197, 97, 191, 90, 36, 6, 63, 246, 84, 124, 190, 40, 58, 121, 191, 160, 137, 243, 62, 160, 137, 243, 190, 209, 158, 92, 191, 46, 250, 207, 62, 66, 82, 48, 191, 66, 82, 48, 191, 150, 57, 74, 62, 123, 72, 54, 63, 123, 72, 54, 191, 173, 195, 94, 62, 234, 216, 236, 62, 4, 6, 92, 191, 234, 216, 108, 62, 234, 216, 108, 62, 204, 234, 113, 191, 143, 106, 137, 62, 0, 0, 0, 0, 59, 165, 141, 191, 112, 30, 141, 62, 114, 30, 141, 190, 191, 35, 144, 191, 0, 137, 116, 62, 74, 255, 1, 191, 196, 134, 113, 191, 162, 17, 69, 62, 176, 162, 49, 191, 176, 162, 49, 191, 0, 0, 0, 0, 211, 104, 55, 63, 211, 104, 55, 191, 0, 0, 0, 0, 238, 91, 241, 62, 82, 197, 97, 191, 0, 0, 0, 0, 238, 91, 113, 62, 139, 201, 120, 191, 0, 0, 0, 0, 0, 0, 0, 0, 14, 176, 143, 191, 0, 0, 0, 0, 56, 97, 152, 190, 199, 17, 157, 191, 0, 0, 0, 0, 173, 207, 1, 191, 198, 218, 114, 191, 0, 0, 0, 0, 212, 95, 55, 191, 212, 95, 55, 191, 164, 17, 69, 190, 176, 162, 49, 63, 176, 162, 49, 191, 176, 195, 94, 190, 234, 216, 236, 62, 4, 6, 92, 191, 9, 197, 109, 190, 6, 197, 109, 62, 246, 219, 114, 191, 212, 136, 120, 190, 0, 0, 0, 0, 123, 23, 128, 191, 153, 12, 133, 190, 153, 12, 133, 190, 174, 229, 135, 191, 176, 195, 94, 190, 234, 216, 236, 190, 4, 6, 92, 191, 164, 17, 69, 190, 176, 162, 49, 191, 176, 162, 49, 191, 162, 17, 197, 190, 195, 18, 39, 63, 195, 18, 39, 191, 173, 195, 222, 190, 173, 195, 222, 62, 75, 205, 73, 191, 234, 216, 236, 190, 173, 195, 94, 62, 4, 6, 92, 191, 238, 91, 241, 190, 0, 0, 0, 0, 82, 197, 97, 191, 234, 216, 236, 190, 176, 195, 94, 190, 4, 6, 92, 191, 173, 195, 222, 190, 173, 195, 222, 190, 75, 205, 73, 191, 162, 17, 197, 190, 195, 18, 39, 191, 195, 18, 39, 191, 58, 205, 19, 191, 58, 205, 19, 63, 58, 205, 19, 191, 195, 18, 39, 191, 162, 17, 197, 62, 195, 18, 39, 191, 164, 66, 67, 191, 49, 159, 88, 62, 164, 66, 67, 191, 138, 24, 72, 191, 0, 0, 0, 0, 138, 24, 72, 191, 80, 111, 76, 191, 210, 204, 98, 190, 80, 111, 76, 191, 206, 35, 67, 191, 166, 44, 230, 190, 206, 35, 67, 191, 210, 33, 20, 191, 210, 33, 20, 191, 210, 33, 20, 191, 48, 239, 71, 209, 133, 176, 7, 162, 196, 233, 168, 211, 203, 178, 60, 160, 136, 242, 51, 207, 80, 175, 89, 163, 91, 241, 39, 201, 89, 177, 101, 170, 252, 243, 191, 62, 2, 164, 200, 171, 40, 226, 95, 37, 206, 146, 65, 159, 210, 217, 161, 26, 117, 131, 161, 153, 153, 229, 254, 230, 201, 170, 246, 137, 48, 234, 207, 218, 242, 173, 180, 149, 114, 232, 245, 213, 60, 178, 185, 156, 100, 239, 218, 205, 157, 177, 24, 166, 186, 244, 5, 54, 133, 164, 143, 166, 117, 216, 47, 35, 12, 133, 171, 157, 126, 208, 150, 24, 157, 114, 108, 159, 185, 207, 126, 254, 82, 64, 195, 139, 240, 221, 135, 242, 4, 89, 143, 128, 160, 216, 207, 238, 251, 77, 214, 130, 8, 231, 206, 223, 78, 174, 14, 144, 243, 231, 6, 36, 68, 151, 225, 157, 35, 201, 96, 18, 149, 100, 147, 164, 181, 193, 150, 14, 24, 88, 147, 169, 156, 49, 19, 249, 155, 58, 227, 143, 75, 43, 243, 254, 102, 71, 241, 137, 185, 37, 170, 250, 34, 76, 160, 137, 186, 35, 206, 238, 104, 71, 169, 142, 216, 29, 201, 12, 31, 106, 228, 153, 55, 62, 185, 7, 47, 77, 0, 175, 136, 186, 93, 0, 209, 77, 49, 174, 150, 45, 93, 235, 252, 57, 110, 148, 231, 38, 166, 236, 116, 66, 238, 144, 73, 24, 162, 233, 251, 82, 244, 141, 70, 19, 39, 219, 72, 84, 166, 149, 125, 13, 146, 47, 115, 86, 78, 168, 62, 49, 69, 28, 140, 68, 19, 183, 239, 48, 234, 22, 141, 75, 136, 177, 226, 39, 133, 222, 217, 62, 222, 152, 236, 38, 48, 226, 207, 63, 103, 150, 151, 19, 140, 227, 211, 85, 105, 144, 233, 4, 107, 223, 34, 96, 60, 147, 145, 12, 35, 34, 197, 94, 255, 156, 245, 44, 42, 24, 80, 79, 44, 175, 5, 43, 170, 27, 203, 77, 179, 176, 253, 35, 1, 220, 8, 67, 8, 153, 51, 42, 39, 218, 178, 61, 118, 156, 210, 29, 226, 225, 204, 73, 154, 147, 246, 9, 33, 227, 39, 96, 153, 143, 4, 7, 49, 22, 250, 105, 213, 144, 226, 41, 188, 7, 197, 101, 173, 159, 56, 59, 193, 16, 183, 68, 100, 180)
}]

[sub_resource type="ConcavePolygonShape3D" id="ConcavePolygonShape3D_xk3gu"]
data = PackedVector3Array(0.4283, 0.7262, -0.7262, 0.4351, 0.4351, -0.7883, 0.613, 0.613, -0.613, 0.4351, 0.4351, -0.7883, 0.6526, 0.3849, -0.6526, 0.613, 0.613, -0.613, 0.4351, 0.4351, -0.7883, 0.4626, 0.2175, -0.8595, 0.6526, 0.3849, -0.6526, 0.4626, 0.2175, -0.8595, 0.6939, 0.1925, -0.6939, 0.6526, 0.3849, -0.6526, 0.4626, 0.2175, -0.8595, 0.4714, 0, -0.8819, 0.6939, 0.1925, -0.6939, 0.4714, 0, -0.8819, 0.7071, 0, -0.7071, 0.6939, 0.1925, -0.6939, 0.4714, 0, -0.8819, 0.524, -0.2464, -0.9735, 0.7071, 0, -0.7071, 0.524, -0.2464, -0.9735, 0.7035, -0.1951, -0.7035, 0.7071, 0, -0.7071, 0.524, -0.2464, -0.9735, 0.4757, -0.4757, -0.8618, 0.7035, -0.1951, -0.7035, 0.4757, -0.4757, -0.8618, 0.7178, -0.4233, -0.7178, 0.7035, -0.1951, -0.7035, 0.4757, -0.4757, -0.8618, 0.4062, -0.6888, -0.6888, 0.7178, -0.4233, -0.7178, 0.4062, -0.6888, -0.6888, 0.63, -0.63, -0.63, 0.7178, -0.4233, -0.7178, 0.1975, 0.712, -0.712, 0.2175, 0.4626, -0.8595, 0.4283, 0.7262, -0.7262, 0.2175, 0.4626, -0.8595, 0.4351, 0.4351, -0.7883, 0.4283, 0.7262, -0.7262, 0.2175, 0.4626, -0.8595, 0.2313, 0.2313, -0.945, 0.4351, 0.4351, -0.7883, 0.2313, 0.2313, -0.945, 0.4626, 0.2175, -0.8595, 0.4351, 0.4351, -0.7883, 0.2313, 0.2313, -0.945, 0.2684, 0, -1.1066, 0.4626, 0.2175, -0.8595, 0.2684, 0, -1.1066, 0.4714, 0, -0.8819, 0.4626, 0.2175, -0.8595, 0.2684, 0, -1.1066, 0.2756, -0.2756, -1.1261, 0.4714, 0, -0.8819, 0.2756, -0.2756, -1.1261, 0.524, -0.2464, -0.9735, 0.4714, 0, -0.8819, 0.2756, -0.2756, -1.1261, 0.2388, -0.5078, -0.9435, 0.524, -0.2464, -0.9735, 0.2388, -0.5078, -0.9435, 0.4757, -0.4757, -0.8618, 0.524, -0.2464, -0.9735, 0.2388, -0.5078, -0.9435, 0.1925, -0.6939, -0.6939, 0.4757, -0.4757, -0.8618, 0.1925, -0.6939, -0.6939, 0.4062, -0.6888, -0.6888, 0.4757, -0.4757, -0.8618, 0, 0.7164, -0.7164, 0, 0.4714, -0.8819, 0.1975, 0.712, -0.712, 0, 0.4714, -0.8819, 0.2175, 0.4626, -0.8595, 0.1975, 0.712, -0.712, 0, 0.4714, -0.8819, 0, 0.2357, -0.9718, 0.2175, 0.4626, -0.8595, 0, 0.2357, -0.9718, 0.2313, 0.2313, -0.945, 0.2175, 0.4626, -0.8595, 0, 0.2357, -0.9718, 0, 0, -1.1226, 0.2313, 0.2313, -0.945, 0, 0, -1.1226, 0.2684, 0, -1.1066, 0.2313, 0.2313, -0.945, 0, 0, -1.1226, 0, -0.2976, -1.2271, 0.2684, 0, -1.1066, 0, -0.2976, -1.2271, 0.2756, -0.2756, -1.1261, 0.2684, 0, -1.1066, 0, -0.2976, -1.2271, 0, -0.5071, -0.9487, 0.2756, -0.2756, -1.1261, 0, -0.5071, -0.9487, 0.2388, -0.5078, -0.9435, 0.2756, -0.2756, -1.1261, 0, -0.5071, -0.9487, 0, -0.7163, -0.7163, 0.2388, -0.5078, -0.9435, 0, -0.7163, -0.7163, 0.1925, -0.6939, -0.6939, 0.2388, -0.5078, -0.9435, -0.1925, 0.6939, -0.6939, -0.2175, 0.4626, -0.8595, 0, 0.7164, -0.7164, -0.2175, 0.4626, -0.8595, 0, 0.4714, -0.8819, 0, 0.7164, -0.7164, -0.2175, 0.4626, -0.8595, -0.2322, 0.2322, -0.9487, 0, 0.4714, -0.8819, -0.2322, 0.2322, -0.9487, 0, 0.2357, -0.9718, 0, 0.4714, -0.8819, -0.2322, 0.2322, -0.9487, -0.2427, 0, -1.0007, 0, 0.2357, -0.9718, -0.2427, 0, -1.0007, 0, 0, -1.1226, 0, 0.2357, -0.9718, -0.2427, 0, -1.0007, -0.2599, -0.2599, -1.0617, 0, 0, -1.1226, -0.2599, -0.2599, -1.0617, 0, -0.2976, -1.2271, 0, 0, -1.1226, -0.2599, -0.2599, -1.0617, -0.2175, -0.4626, -0.8595, 0, -0.2976, -1.2271, -0.2175, -0.4626, -0.8595, 0, -0.5071, -0.9487, 0, -0.2976, -1.2271, -0.2175, -0.4626, -0.8595, -0.1925, -0.6939, -0.6939, 0, -0.5071, -0.9487, -0.1925, -0.6939, -0.6939, 0, -0.7163, -0.7163, 0, -0.5071, -0.9487, -0.3849, 0.6526, -0.6526, -0.4351, 0.4351, -0.7883, -0.1925, 0.6939, -0.6939, -0.4351, 0.4351, -0.7883, -0.2175, 0.4626, -0.8595, -0.1925, 0.6939, -0.6939, -0.4351, 0.4351, -0.7883, -0.4626, 0.2175, -0.8595, -0.2175, 0.4626, -0.8595, -0.4626, 0.2175, -0.8595, -0.2322, 0.2322, -0.9487, -0.2175, 0.4626, -0.8595, -0.4626, 0.2175, -0.8595, -0.4714, 0, -0.8819, -0.2322, 0.2322, -0.9487, -0.4714, 0, -0.8819, -0.2427, 0, -1.0007, -0.2322, 0.2322, -0.9487, -0.4714, 0, -0.8819, -0.4626, -0.2175, -0.8595, -0.2427, 0, -1.0007, -0.4626, -0.2175, -0.8595, -0.2599, -0.2599, -1.0617, -0.2427, 0, -1.0007, -0.4626, -0.2175, -0.8595, -0.4351, -0.4351, -0.7883, -0.2599, -0.2599, -1.0617, -0.4351, -0.4351, -0.7883, -0.2175, -0.4626, -0.8595, -0.2599, -0.2599, -1.0617, -0.4351, -0.4351, -0.7883, -0.3849, -0.6526, -0.6526, -0.2175, -0.4626, -0.8595, -0.3849, -0.6526, -0.6526, -0.1925, -0.6939, -0.6939, -0.2175, -0.4626, -0.8595, -0.5774, 0.5774, -0.5774, -0.6526, 0.3849, -0.6526, -0.3849, 0.6526, -0.6526, -0.6526, 0.3849, -0.6526, -0.4351, 0.4351, -0.7883, -0.3849, 0.6526, -0.6526, -0.6526, 0.3849, -0.6526, -0.7627, 0.2115, -0.7627, -0.4351, 0.4351, -0.7883, -0.7627, 0.2115, -0.7627, -0.4626, 0.2175, -0.8595, -0.4351, 0.4351, -0.7883, -0.7627, 0.2115, -0.7627, -0.7816, 0, -0.7816, -0.4626, 0.2175, -0.8595, -0.7816, 0, -0.7816, -0.4714, 0, -0.8819, -0.4626, 0.2175, -0.8595, -0.7816, 0, -0.7816, -0.7986, -0.2215, -0.7986, -0.4714, 0, -0.8819, -0.7986, -0.2215, -0.7986, -0.4626, -0.2175, -0.8595, -0.4714, 0, -0.8819, -0.7986, -0.2215, -0.7986, -0.7623, -0.4496, -0.7623, -0.4626, -0.2175, -0.8595, -0.7623, -0.4496, -0.7623, -0.4351, -0.4351, -0.7883, -0.4626, -0.2175, -0.8595, -0.7623, -0.4496, -0.7623, -0.5786, -0.5786, -0.5786, -0.4351, -0.4351, -0.7883, -0.5786, -0.5786, -0.5786, -0.3849, -0.6526, -0.6526, -0.4351, -0.4351, -0.7883)

[sub_resource type="Shader" id="Shader_boonm"]
code = "shader_type spatial;

// use uniforms to pass values between code and shaders
uniform float min_height;
uniform float max_height;
// gradient texture to assign colours to planet regions
uniform sampler2D height_colour;

// variable interpolated between vertices
varying float height;

void vertex() {
	// given the origin of the mesh is the centre of the planet,
	// the height is just the length of the current vertex in local space
	height = length(VERTEX);

}

void fragment() {
	// Called for every pixel the material is visible on.
	// linear interpolation of current height between min and max height
	// gives a value for the current height between 0 and 1
	float t = (height - min_height)/(max_height - min_height);
	
	// sample the height_colour texture - because it's a 1D gradient, always use y=0 and set x = t
	// get rgb to remove any alpha channel
	vec3 colour = texture(height_colour, vec2(t, 0.0)).rgb;
	
	// set colour
	ALBEDO = colour;
}

//void light() {
	// Called for every pixel for every light affecting the material.
	// Uncomment to replace the default light processing function with this one.
//}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_aswqh"]
resource_local_to_scene = true
render_priority = 0
shader = SubResource("Shader_boonm")
shader_parameter/min_height = 1.0
shader_parameter/max_height = 1.27799
shader_parameter/height_colour = ExtResource("2_k0a6c")

[sub_resource type="ArrayMesh" id="ArrayMesh_5rb4u"]
_surfaces = [{
"aabb": AABB(-0.719236, -0.728682, 0.57735, 1.49439, 1.43579, 0.533434),
"attribute_data": PackedByteArray(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
"format": 34359742487,
"index_count": 216,
"index_data": PackedByteArray(7, 0, 8, 0, 0, 0, 8, 0, 1, 0, 0, 0, 8, 0, 9, 0, 1, 0, 9, 0, 2, 0, 1, 0, 9, 0, 10, 0, 2, 0, 10, 0, 3, 0, 2, 0, 10, 0, 11, 0, 3, 0, 11, 0, 4, 0, 3, 0, 11, 0, 12, 0, 4, 0, 12, 0, 5, 0, 4, 0, 12, 0, 13, 0, 5, 0, 13, 0, 6, 0, 5, 0, 14, 0, 15, 0, 7, 0, 15, 0, 8, 0, 7, 0, 15, 0, 16, 0, 8, 0, 16, 0, 9, 0, 8, 0, 16, 0, 17, 0, 9, 0, 17, 0, 10, 0, 9, 0, 17, 0, 18, 0, 10, 0, 18, 0, 11, 0, 10, 0, 18, 0, 19, 0, 11, 0, 19, 0, 12, 0, 11, 0, 19, 0, 20, 0, 12, 0, 20, 0, 13, 0, 12, 0, 21, 0, 22, 0, 14, 0, 22, 0, 15, 0, 14, 0, 22, 0, 23, 0, 15, 0, 23, 0, 16, 0, 15, 0, 23, 0, 24, 0, 16, 0, 24, 0, 17, 0, 16, 0, 24, 0, 25, 0, 17, 0, 25, 0, 18, 0, 17, 0, 25, 0, 26, 0, 18, 0, 26, 0, 19, 0, 18, 0, 26, 0, 27, 0, 19, 0, 27, 0, 20, 0, 19, 0, 28, 0, 29, 0, 21, 0, 29, 0, 22, 0, 21, 0, 29, 0, 30, 0, 22, 0, 30, 0, 23, 0, 22, 0, 30, 0, 31, 0, 23, 0, 31, 0, 24, 0, 23, 0, 31, 0, 32, 0, 24, 0, 32, 0, 25, 0, 24, 0, 32, 0, 33, 0, 25, 0, 33, 0, 26, 0, 25, 0, 33, 0, 34, 0, 26, 0, 34, 0, 27, 0, 26, 0, 35, 0, 36, 0, 28, 0, 36, 0, 29, 0, 28, 0, 36, 0, 37, 0, 29, 0, 37, 0, 30, 0, 29, 0, 37, 0, 38, 0, 30, 0, 38, 0, 31, 0, 30, 0, 38, 0, 39, 0, 31, 0, 39, 0, 32, 0, 31, 0, 39, 0, 40, 0, 32, 0, 40, 0, 33, 0, 32, 0, 40, 0, 41, 0, 33, 0, 41, 0, 34, 0, 33, 0, 42, 0, 43, 0, 35, 0, 43, 0, 36, 0, 35, 0, 43, 0, 44, 0, 36, 0, 44, 0, 37, 0, 36, 0, 44, 0, 45, 0, 37, 0, 45, 0, 38, 0, 37, 0, 45, 0, 46, 0, 38, 0, 46, 0, 39, 0, 38, 0, 46, 0, 47, 0, 39, 0, 47, 0, 40, 0, 39, 0, 47, 0, 48, 0, 40, 0, 48, 0, 41, 0, 40, 0),
"material": SubResource("ShaderMaterial_aswqh"),
"primitive": 3,
"uv_scale": Vector4(0, 0, 0, 0),
"vertex_count": 49,
"vertex_data": PackedByteArray(216, 208, 20, 63, 216, 208, 20, 191, 216, 208, 20, 63, 82, 89, 42, 63, 190, 238, 200, 190, 82, 89, 42, 63, 139, 221, 50, 63, 240, 110, 70, 190, 139, 221, 50, 63, 243, 4, 53, 63, 0, 0, 0, 0, 243, 4, 53, 63, 65, 213, 67, 63, 220, 65, 89, 62, 65, 213, 67, 63, 127, 112, 70, 63, 254, 16, 234, 62, 127, 112, 70, 63, 34, 126, 25, 63, 34, 126, 25, 63, 34, 126, 25, 63, 153, 8, 220, 62, 230, 138, 58, 191, 230, 138, 58, 63, 36, 44, 226, 62, 36, 44, 226, 190, 168, 227, 76, 63, 46, 73, 247, 62, 13, 149, 104, 190, 119, 184, 101, 63, 104, 227, 248, 62, 0, 0, 0, 0, 79, 208, 104, 63, 234, 216, 236, 62, 176, 195, 94, 62, 4, 6, 92, 63, 189, 183, 223, 62, 189, 183, 223, 62, 100, 170, 74, 63, 162, 17, 197, 62, 195, 18, 39, 63, 195, 18, 39, 63, 147, 158, 74, 62, 130, 163, 54, 191, 130, 163, 54, 63, 173, 195, 94, 62, 234, 216, 236, 190, 4, 6, 92, 63, 78, 166, 130, 62, 78, 166, 130, 190, 62, 114, 133, 63, 107, 239, 137, 62, 0, 0, 0, 0, 46, 46, 142, 63, 234, 216, 108, 62, 237, 216, 108, 62, 204, 234, 113, 63, 52, 232, 101, 62, 10, 113, 244, 62, 11, 20, 99, 63, 162, 17, 69, 62, 176, 162, 49, 63, 176, 162, 49, 63, 0, 0, 0, 0, 195, 110, 54, 191, 195, 110, 54, 63, 0, 0, 0, 0, 172, 188, 242, 190, 72, 15, 99, 63, 0, 0, 0, 0, 156, 94, 116, 190, 241, 227, 123, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 241, 91, 113, 62, 139, 201, 120, 63, 0, 0, 0, 0, 238, 91, 241, 62, 82, 197, 97, 63, 0, 0, 0, 0, 243, 4, 53, 63, 243, 4, 53, 63, 164, 17, 69, 190, 176, 162, 49, 191, 176, 162, 49, 63, 176, 195, 94, 190, 234, 216, 236, 190, 4, 6, 92, 63, 237, 216, 108, 190, 234, 216, 108, 190, 204, 234, 113, 63, 241, 91, 113, 190, 0, 0, 0, 0, 139, 201, 120, 63, 236, 216, 108, 190, 236, 216, 108, 62, 204, 234, 113, 63, 176, 195, 94, 190, 234, 216, 236, 62, 4, 6, 92, 63, 216, 123, 69, 190, 107, 2, 50, 63, 107, 2, 50, 63, 162, 17, 197, 190, 195, 18, 39, 191, 195, 18, 39, 63, 173, 195, 222, 190, 173, 195, 222, 190, 75, 205, 73, 63, 234, 216, 236, 190, 173, 195, 94, 190, 4, 6, 92, 63, 238, 91, 241, 190, 0, 0, 0, 0, 82, 197, 97, 63, 234, 216, 236, 190, 176, 195, 94, 62, 4, 6, 92, 63, 173, 195, 222, 190, 173, 195, 222, 62, 75, 205, 73, 63, 106, 99, 199, 190, 42, 10, 41, 63, 42, 10, 41, 63, 58, 205, 19, 191, 58, 205, 19, 191, 58, 205, 19, 63, 195, 18, 39, 191, 162, 17, 197, 190, 195, 18, 39, 63, 224, 31, 56, 191, 142, 68, 76, 190, 224, 31, 56, 63, 243, 4, 53, 191, 0, 0, 0, 0, 243, 4, 53, 63, 176, 162, 49, 191, 164, 17, 69, 62, 176, 162, 49, 63, 195, 18, 39, 191, 162, 17, 197, 62, 195, 18, 39, 63, 58, 205, 19, 191, 58, 205, 19, 63, 58, 205, 19, 63, 120, 179, 74, 101, 94, 78, 204, 162, 52, 172, 182, 97, 65, 74, 153, 157, 106, 185, 146, 118, 135, 84, 39, 166, 250, 176, 228, 122, 253, 86, 222, 159, 4, 150, 54, 126, 51, 106, 80, 140, 157, 137, 35, 168, 76, 101, 155, 159, 92, 153, 171, 198, 153, 49, 51, 197, 141, 156, 113, 100, 188, 76, 30, 146, 189, 165, 169, 95, 240, 70, 13, 153, 252, 176, 216, 108, 117, 81, 28, 160, 237, 179, 152, 141, 217, 84, 226, 171, 104, 163, 59, 142, 76, 93, 39, 159, 186, 147, 93, 161, 51, 96, 158, 161, 51, 142, 130, 182, 30, 79, 112, 174, 16, 129, 17, 79, 50, 63, 192, 140, 224, 134, 74, 83, 88, 65, 106, 141, 175, 135, 254, 89, 17, 74, 225, 138, 97, 150, 31, 142, 55, 104, 96, 149, 161, 150, 188, 160, 182, 93, 97, 163, 1, 146, 71, 167, 177, 92, 23, 165, 213, 149, 197, 177, 191, 75, 64, 177, 22, 120, 64, 77, 8, 57, 29, 141, 96, 125, 254, 83, 142, 70, 87, 137, 72, 115, 180, 100, 108, 161, 99, 130, 236, 102, 211, 126, 98, 152, 160, 142, 130, 119, 163, 158, 224, 125, 30, 145, 33, 124, 181, 170, 159, 111, 34, 155, 38, 127, 48, 184, 106, 95, 67, 165, 245, 107, 52, 82, 105, 60, 185, 136, 132, 108, 14, 89, 125, 79, 145, 129, 254, 104, 126, 106, 230, 165, 36, 138, 3, 102, 178, 128, 168, 152, 210, 143, 209, 106, 45, 149, 80, 143, 88, 148, 172, 110, 166, 166, 145, 124, 50, 151, 236, 115, 1, 177, 198, 107, 214, 159, 134, 94, 29, 88, 82, 184, 43, 133, 110, 95, 0, 92, 237, 181, 9, 138, 178, 90, 128, 111, 73, 170, 144, 150, 135, 82, 162, 127, 58, 166, 137, 157, 227, 88, 207, 145, 162, 156, 146, 158, 224, 93, 129, 160, 161, 142, 154, 157, 232, 99, 51, 169, 53, 127, 130, 154, 1, 92, 1, 92, 46, 184, 11, 142, 229, 88, 46, 91, 112, 186, 155, 146, 169, 86, 211, 108, 250, 174, 130, 155, 69, 77, 188, 129, 192, 167, 234, 161, 51, 79, 117, 141, 94, 162, 186, 163, 6, 85, 222, 155, 109, 150, 46, 162, 44, 88, 158, 164, 250, 138, 68, 160)
}]

[sub_resource type="ConcavePolygonShape3D" id="ConcavePolygonShape3D_6bt43"]
data = PackedVector3Array(0.4298, -0.7287, 0.7287, 0.4417, -0.4417, 0.8003, 0.5813, -0.5813, 0.5813, 0.4417, -0.4417, 0.8003, 0.6654, -0.3924, 0.6654, 0.5813, -0.5813, 0.5813, 0.4417, -0.4417, 0.8003, 0.483, -0.2271, 0.8973, 0.6654, -0.3924, 0.6654, 0.483, -0.2271, 0.8973, 0.6987, -0.1938, 0.6987, 0.6654, -0.3924, 0.6654, 0.483, -0.2271, 0.8973, 0.4861, 0, 0.9094, 0.6987, -0.1938, 0.6987, 0.4861, 0, 0.9094, 0.7071, 0, 0.7071, 0.6987, -0.1938, 0.6987, 0.4861, 0, 0.9094, 0.4626, 0.2175, 0.8595, 0.7071, 0, 0.7071, 0.4626, 0.2175, 0.8595, 0.765, 0.2122, 0.765, 0.7071, 0, 0.7071, 0.4626, 0.2175, 0.8595, 0.4369, 0.4369, 0.7917, 0.765, 0.2122, 0.765, 0.4369, 0.4369, 0.7917, 0.7752, 0.4572, 0.7752, 0.765, 0.2122, 0.765, 0.4369, 0.4369, 0.7917, 0.3849, 0.6526, 0.6526, 0.7752, 0.4572, 0.7752, 0.3849, 0.6526, 0.6526, 0.5996, 0.5996, 0.5996, 0.7752, 0.4572, 0.7752, 0.1979, -0.7134, 0.7134, 0.2175, -0.4626, 0.8595, 0.4298, -0.7287, 0.7287, 0.2175, -0.4626, 0.8595, 0.4417, -0.4417, 0.8003, 0.4298, -0.7287, 0.7287, 0.2175, -0.4626, 0.8595, 0.2552, -0.2552, 1.0425, 0.4417, -0.4417, 0.8003, 0.2552, -0.2552, 1.0425, 0.483, -0.2271, 0.8973, 0.4417, -0.4417, 0.8003, 0.2552, -0.2552, 1.0425, 0.2694, 0, 1.1108, 0.483, -0.2271, 0.8973, 0.2694, 0, 1.1108, 0.4861, 0, 0.9094, 0.483, -0.2271, 0.8973, 0.2694, 0, 1.1108, 0.2313, 0.2313, 0.945, 0.4861, 0, 0.9094, 0.2313, 0.2313, 0.945, 0.4626, 0.2175, 0.8595, 0.4861, 0, 0.9094, 0.2313, 0.2313, 0.945, 0.2245, 0.4774, 0.887, 0.4626, 0.2175, 0.8595, 0.2245, 0.4774, 0.887, 0.4369, 0.4369, 0.7917, 0.4626, 0.2175, 0.8595, 0.2245, 0.4774, 0.887, 0.1925, 0.6939, 0.6939, 0.4369, 0.4369, 0.7917, 0.1925, 0.6939, 0.6939, 0.3849, 0.6526, 0.6526, 0.4369, 0.4369, 0.7917, 0, -0.7126, 0.7126, 0, -0.4741, 0.887, 0.1979, -0.7134, 0.7134, 0, -0.4741, 0.887, 0.2175, -0.4626, 0.8595, 0.1979, -0.7134, 0.7134, 0, -0.4741, 0.887, 0, -0.2386, 0.9839, 0.2175, -0.4626, 0.8595, 0, -0.2386, 0.9839, 0.2552, -0.2552, 1.0425, 0.2175, -0.4626, 0.8595, 0, -0.2386, 0.9839, 0, 0, 1, 0.2552, -0.2552, 1.0425, 0, 0, 1, 0.2694, 0, 1.1108, 0.2552, -0.2552, 1.0425, 0, 0, 1, 0, 0.2357, 0.9718, 0.2694, 0, 1.1108, 0, 0.2357, 0.9718, 0.2313, 0.2313, 0.945, 0.2694, 0, 1.1108, 0, 0.2357, 0.9718, 0, 0.4714, 0.8819, 0.2313, 0.2313, 0.945, 0, 0.4714, 0.8819, 0.2245, 0.4774, 0.887, 0.2313, 0.2313, 0.945, 0, 0.4714, 0.8819, 0, 0.7071, 0.7071, 0.2245, 0.4774, 0.887, 0, 0.7071, 0.7071, 0.1925, 0.6939, 0.6939, 0.2245, 0.4774, 0.887, -0.1925, -0.6939, 0.6939, -0.2175, -0.4626, 0.8595, 0, -0.7126, 0.7126, -0.2175, -0.4626, 0.8595, 0, -0.4741, 0.887, 0, -0.7126, 0.7126, -0.2175, -0.4626, 0.8595, -0.2313, -0.2313, 0.945, 0, -0.4741, 0.887, -0.2313, -0.2313, 0.945, 0, -0.2386, 0.9839, 0, -0.4741, 0.887, -0.2313, -0.2313, 0.945, -0.2357, 0, 0.9718, 0, -0.2386, 0.9839, -0.2357, 0, 0.9718, 0, 0, 1, 0, -0.2386, 0.9839, -0.2357, 0, 0.9718, -0.2313, 0.2313, 0.945, 0, 0, 1, -0.2313, 0.2313, 0.945, 0, 0.2357, 0.9718, 0, 0, 1, -0.2313, 0.2313, 0.945, -0.2175, 0.4626, 0.8595, 0, 0.2357, 0.9718, -0.2175, 0.4626, 0.8595, 0, 0.4714, 0.8819, 0, 0.2357, 0.9718, -0.2175, 0.4626, 0.8595, -0.1929, 0.6953, 0.6953, 0, 0.4714, 0.8819, -0.1929, 0.6953, 0.6953, 0, 0.7071, 0.7071, 0, 0.4714, 0.8819, -0.3849, -0.6526, 0.6526, -0.4351, -0.4351, 0.7883, -0.1925, -0.6939, 0.6939, -0.4351, -0.4351, 0.7883, -0.2175, -0.4626, 0.8595, -0.1925, -0.6939, 0.6939, -0.4351, -0.4351, 0.7883, -0.4626, -0.2175, 0.8595, -0.2175, -0.4626, 0.8595, -0.4626, -0.2175, 0.8595, -0.2313, -0.2313, 0.945, -0.2175, -0.4626, 0.8595, -0.4626, -0.2175, 0.8595, -0.4714, 0, 0.8819, -0.2313, -0.2313, 0.945, -0.4714, 0, 0.8819, -0.2357, 0, 0.9718, -0.2313, -0.2313, 0.945, -0.4714, 0, 0.8819, -0.4626, 0.2175, 0.8595, -0.2357, 0, 0.9718, -0.4626, 0.2175, 0.8595, -0.2313, 0.2313, 0.945, -0.2357, 0, 0.9718, -0.4626, 0.2175, 0.8595, -0.4351, 0.4351, 0.7883, -0.2313, 0.2313, 0.945, -0.4351, 0.4351, 0.7883, -0.2175, 0.4626, 0.8595, -0.2313, 0.2313, 0.945, -0.4351, 0.4351, 0.7883, -0.3894, 0.6603, 0.6603, -0.2175, 0.4626, 0.8595, -0.3894, 0.6603, 0.6603, -0.1929, 0.6953, 0.6953, -0.2175, 0.4626, 0.8595, -0.5774, -0.5774, 0.5774, -0.6526, -0.3849, 0.6526, -0.3849, -0.6526, 0.6526, -0.6526, -0.3849, 0.6526, -0.4351, -0.4351, 0.7883, -0.3849, -0.6526, 0.6526, -0.6526, -0.3849, 0.6526, -0.7192, -0.1995, 0.7192, -0.4351, -0.4351, 0.7883, -0.7192, -0.1995, 0.7192, -0.4626, -0.2175, 0.8595, -0.4351, -0.4351, 0.7883, -0.7192, -0.1995, 0.7192, -0.7071, 0, 0.7071, -0.4626, -0.2175, 0.8595, -0.7071, 0, 0.7071, -0.4714, 0, 0.8819, -0.4626, -0.2175, 0.8595, -0.7071, 0, 0.7071, -0.6939, 0.1925, 0.6939, -0.4714, 0, 0.8819, -0.6939, 0.1925, 0.6939, -0.4626, 0.2175, 0.8595, -0.4714, 0, 0.8819, -0.6939, 0.1925, 0.6939, -0.6526, 0.3849, 0.6526, -0.4626, 0.2175, 0.8595, -0.6526, 0.3849, 0.6526, -0.4351, 0.4351, 0.7883, -0.4626, 0.2175, 0.8595, -0.6526, 0.3849, 0.6526, -0.5774, 0.5774, 0.5774, -0.4351, 0.4351, 0.7883, -0.5774, 0.5774, 0.5774, -0.3894, 0.6603, 0.6603, -0.4351, 0.4351, 0.7883)

[node name="Planet" type="Node3D"]
script = ExtResource("1_6vnuc")
planet_data = SubResource("Resource_v7hk1")

[node name="MeshUp" type="MeshInstance3D" parent="."]
material_override = SubResource("ShaderMaterial_bmu3h")
mesh = SubResource("ArrayMesh_20d66")
surface_material_override/0 = SubResource("ShaderMaterial_qfn3r")
script = ExtResource("2_4jp6r")
normal = Vector3(0, 1, 0)
resolution = 7
planet_data = SubResource("Resource_v7hk1")

[node name="MeshUp_col" type="StaticBody3D" parent="MeshUp"]

[node name="CollisionShape3D" type="CollisionShape3D" parent="MeshUp/MeshUp_col"]
shape = SubResource("ConcavePolygonShape3D_lo5ds")

[node name="MeshDown" type="MeshInstance3D" parent="."]
material_override = SubResource("ShaderMaterial_bmu3h")
mesh = SubResource("ArrayMesh_hr87v")
surface_material_override/0 = SubResource("ShaderMaterial_mrjl7")
script = ExtResource("2_4jp6r")
normal = Vector3(0, -1, 0)
resolution = 7
planet_data = SubResource("Resource_v7hk1")

[node name="MeshDown_col" type="StaticBody3D" parent="MeshDown"]

[node name="CollisionShape3D" type="CollisionShape3D" parent="MeshDown/MeshDown_col"]
shape = SubResource("ConcavePolygonShape3D_qqwq2")

[node name="MeshLeft" type="MeshInstance3D" parent="."]
material_override = SubResource("ShaderMaterial_bmu3h")
mesh = SubResource("ArrayMesh_586tq")
surface_material_override/0 = SubResource("ShaderMaterial_e8otq")
script = ExtResource("2_4jp6r")
normal = Vector3(-1, 0, 0)
resolution = 7
planet_data = SubResource("Resource_v7hk1")

[node name="MeshLeft_col" type="StaticBody3D" parent="MeshLeft"]

[node name="CollisionShape3D" type="CollisionShape3D" parent="MeshLeft/MeshLeft_col"]
shape = SubResource("ConcavePolygonShape3D_bwd6h")

[node name="MeshRight" type="MeshInstance3D" parent="."]
material_override = SubResource("ShaderMaterial_bmu3h")
mesh = SubResource("ArrayMesh_5twgj")
surface_material_override/0 = SubResource("ShaderMaterial_v8feu")
script = ExtResource("2_4jp6r")
normal = Vector3(1, 0, 0)
resolution = 7
planet_data = SubResource("Resource_v7hk1")

[node name="MeshRight_col" type="StaticBody3D" parent="MeshRight"]

[node name="CollisionShape3D" type="CollisionShape3D" parent="MeshRight/MeshRight_col"]
shape = SubResource("ConcavePolygonShape3D_jgp0f")

[node name="MeshFront" type="MeshInstance3D" parent="."]
material_override = SubResource("ShaderMaterial_bmu3h")
mesh = SubResource("ArrayMesh_gj8ds")
surface_material_override/0 = SubResource("ShaderMaterial_04acc")
script = ExtResource("2_4jp6r")
normal = Vector3(0, 0, -1)
resolution = 7
planet_data = SubResource("Resource_v7hk1")

[node name="MeshFront_col" type="StaticBody3D" parent="MeshFront"]

[node name="CollisionShape3D" type="CollisionShape3D" parent="MeshFront/MeshFront_col"]
shape = SubResource("ConcavePolygonShape3D_xk3gu")

[node name="MeshBack" type="MeshInstance3D" parent="."]
material_override = SubResource("ShaderMaterial_bmu3h")
mesh = SubResource("ArrayMesh_5rb4u")
surface_material_override/0 = SubResource("ShaderMaterial_aswqh")
script = ExtResource("2_4jp6r")
normal = Vector3(0, 0, 1)
resolution = 7
planet_data = SubResource("Resource_v7hk1")

[node name="MeshBack_col" type="StaticBody3D" parent="MeshBack"]

[node name="CollisionShape3D" type="CollisionShape3D" parent="MeshBack/MeshBack_col"]
shape = SubResource("ConcavePolygonShape3D_6bt43")
