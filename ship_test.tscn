[gd_scene load_steps=47 format=4 uid="uid://j24m6bf3xtgt"]

[ext_resource type="Texture2D" uid="uid://bkjskdmju6t8e" path="res://Assets/Skyboxes/blue-nebula-panorama.png" id="1_13pva"]
[ext_resource type="PackedScene" uid="uid://7m4dqlk8r5y6" path="res://planet.tscn" id="2_vr651"]
[ext_resource type="Curve" uid="uid://c2gpbjcjln5ht" path="res://Assets/planet_LOD_Curve.tres" id="3_mrcjk"]
[ext_resource type="Script" uid="uid://dqpjojp8k1ghw" path="res://Scripts/Procedural Planet Generation/PlanetNoise.gd" id="4_uqdfs"]
[ext_resource type="Script" uid="uid://bi8oy8he1sf8t" path="res://Scripts/Procedural Planet Generation/PlanetData.gd" id="5_edwk4"]
[ext_resource type="PackedScene" uid="uid://c1ukmdoquihnf" path="res://player_ship.tscn" id="5_k5gf6"]
[ext_resource type="PackedScene" uid="uid://b0kact46d6k7v" path="res://station.tscn" id="7_3pfx5"]
[ext_resource type="PackedScene" uid="uid://b0t3f04d7go35" path="res://Assets/basic station.glb" id="8_akawr"]
[ext_resource type="PackedScene" uid="uid://do207dq50eghy" path="res://Assets/space brigade starbird 2.glb" id="9_2bue7"]
[ext_resource type="PackedScene" uid="uid://cq8lyns0gewpj" path="res://Assets/space brigade starbird classic.glb" id="10_18t8f"]
[ext_resource type="PackedScene" uid="uid://4lld0nvcdfgy" path="res://Assets/wallbug ship.glb" id="11_pe6qr"]
[ext_resource type="PackedScene" uid="uid://dw2u20gii53r0" path="res://Assets/space brigade star-ranger.glb" id="12_wftjq"]

[sub_resource type="PanoramaSkyMaterial" id="PanoramaSkyMaterial_smvli"]
panorama = ExtResource("1_13pva")

[sub_resource type="Sky" id="Sky_cd76q"]
sky_material = SubResource("PanoramaSkyMaterial_smvli")

[sub_resource type="Environment" id="Environment_qmve8"]
background_mode = 2
sky = SubResource("Sky_cd76q")
tonemap_mode = 1
glow_enabled = true
fog_sky_affect = 0.5
volumetric_fog_enabled = true
volumetric_fog_density = 0.0

[sub_resource type="Gradient" id="Gradient_4u15d"]
interpolation_mode = 2
offsets = PackedFloat32Array(0, 0.0134228, 0.210291, 0.311579, 0.486316, 0.747368, 0.985263, 1)
colors = PackedColorArray(0.505898, 0, 0.250038, 1, 0.954153, 0.861388, 0.134835, 1, 0.612282, 0.205756, 0, 1, 0.319367, 0.375031, 0.391729, 1, 0.332142, 0.362886, 0.39965, 1, 0.763837, 0.776376, 0.794245, 1, 1, 1, 1, 1, 0, 0, 0, 1)
metadata/_snap_count = 15

[sub_resource type="GradientTexture1D" id="GradientTexture1D_6lmls"]
resource_local_to_scene = true
gradient = SubResource("Gradient_4u15d")

[sub_resource type="Shader" id="Shader_o7lr8"]
code = "shader_type spatial;

// use uniforms to pass values between code and shaders
uniform float min_height;
uniform float max_height;
// gradient texture to assign colours to planet regions
uniform sampler2D height_colour;

// variable interpolated between vertices
varying float height;

void vertex() {
	// given the origin of the mesh is the centre of the planet,
	// the height is just the length of the current vertex in local space
	height = length(VERTEX);

}

void fragment() {
	// Called for every pixel the material is visible on.
	// linear interpolation of current height between min and max height
	// gives a value for the current height between 0 and 1
	float t = (height - min_height)/(max_height - min_height);
	
	// sample the height_colour texture - because it's a 1D gradient, always use y=0 and set x = t
	// get rgb to remove any alpha channel
	vec3 colour = texture(height_colour, vec2(t, 0.0)).rgb;
	
	// set colour
	ALBEDO = colour;
}

//void light() {
	// Called for every pixel for every light affecting the material.
	// Uncomment to replace the default light processing function with this one.
//}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_egul7"]
resource_local_to_scene = true
render_priority = 0
shader = SubResource("Shader_o7lr8")
shader_parameter/min_height = 1.0
shader_parameter/max_height = 1.27799
shader_parameter/height_colour = SubResource("GradientTexture1D_6lmls")

[sub_resource type="FastNoiseLite" id="FastNoiseLite_2c5qk"]
seed = 56
frequency = 1.0

[sub_resource type="Resource" id="Resource_bjoya"]
script = ExtResource("4_uqdfs")
min_height = 0.2
amplitude = 0.4
height_map = SubResource("FastNoiseLite_2c5qk")

[sub_resource type="Resource" id="Resource_8n7bn"]
resource_local_to_scene = true
script = ExtResource("5_edwk4")
atmosphere_type = 1
seed = 56
resolution = 3
LODCurve = ExtResource("3_mrcjk")
radius = 500
planet_noise = Array[ExtResource("4_uqdfs")]([SubResource("Resource_bjoya")])
planet_colour = SubResource("GradientTexture1D_6lmls")
planet_material = SubResource("ShaderMaterial_egul7")

[sub_resource type="Shader" id="Shader_mdwff"]
code = "shader_type spatial;

// use uniforms to pass values between code and shaders
uniform float min_height;
uniform float max_height;
// gradient texture to assign colours to planet regions
uniform sampler2D height_colour;

// variable interpolated between vertices
varying float height;

void vertex() {
	// given the origin of the mesh is the centre of the planet,
	// the height is just the length of the current vertex in local space
	height = length(VERTEX);

}

void fragment() {
	// Called for every pixel the material is visible on.
	// linear interpolation of current height between min and max height
	// gives a value for the current height between 0 and 1
	float t = (height - min_height)/(max_height - min_height);
	
	// sample the height_colour texture - because it's a 1D gradient, always use y=0 and set x = t
	// get rgb to remove any alpha channel
	vec3 colour = texture(height_colour, vec2(t, 0.0)).rgb;
	
	// set colour
	ALBEDO = colour;
}

//void light() {
	// Called for every pixel for every light affecting the material.
	// Uncomment to replace the default light processing function with this one.
//}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_f7kwh"]
resource_local_to_scene = true
render_priority = 0
shader = SubResource("Shader_mdwff")
shader_parameter/min_height = 1.0
shader_parameter/max_height = 1.27799
shader_parameter/height_colour = SubResource("GradientTexture1D_6lmls")

[sub_resource type="ArrayMesh" id="ArrayMesh_pp1kx"]
_surfaces = [{
"aabb": AABB(-353.55338, 288.67514, -376.82446, 707.10675, 248.90598, 730.3778),
"attribute_data": PackedByteArray("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"),
"format": 34359742487,
"index_count": 24,
"index_data": PackedByteArray("AwAEAAAABAABAAAABAAFAAEABQACAAEABgAHAAMABwAEAAMABwAIAAQACAAFAAQA"),
"material": SubResource("ShaderMaterial_f7kwh"),
"primitive": 3,
"uv_scale": Vector4(0, 0, 0, 0),
"vertex_count": 9,
"vertex_data": PackedByteArray("O0SkwztEpEM7RKRDAAAAANXGsEPVxrBDa1aQQ2tWkENrVpBD1caww9XGsEMAAAAAAAAAADFlBkQAAAAA1cawQ9XGsEMAAAAAa1aQw2tWkENrVpDDAAAAAIhpvEOIabzDa1aQQ2tWkENrVpDDHGc4zsk9jLCPkXTLtimxwHyXBdGaLOrHTkvs2qQrgqvwg+f7NgT3wRikT84eN4jOkUoN4v0jeqjAUWjyoxevpkO7Ot89IOTX")
}]

[sub_resource type="ConcavePolygonShape3D" id="ConcavePolygonShape3D_wa3b3"]
data = PackedVector3Array(-353.5534, 353.5534, 0, 0, 537.5811, 0, -328.53308, 328.53308, 328.53308, 0, 537.5811, 0, 0, 353.5534, 353.5534, -328.53308, 328.53308, 328.53308, 0, 537.5811, 0, 353.5534, 353.5534, 0, 0, 353.5534, 353.5534, 353.5534, 353.5534, 0, 288.67508, 288.67508, 288.67508, 0, 353.5534, 353.5534, -288.67508, 288.67508, -288.67508, 0, 376.8245, -376.8245, -353.5534, 353.5534, 0, 0, 376.8245, -376.8245, 0, 537.5811, 0, -353.5534, 353.5534, 0, 0, 376.8245, -376.8245, 288.67508, 288.67508, -288.67508, 0, 537.5811, 0, 288.67508, 288.67508, -288.67508, 353.5534, 353.5534, 0, 0, 537.5811, 0)

[sub_resource type="Shader" id="Shader_xum18"]
code = "shader_type spatial;

// use uniforms to pass values between code and shaders
uniform float min_height;
uniform float max_height;
// gradient texture to assign colours to planet regions
uniform sampler2D height_colour;

// variable interpolated between vertices
varying float height;

void vertex() {
	// given the origin of the mesh is the centre of the planet,
	// the height is just the length of the current vertex in local space
	height = length(VERTEX);

}

void fragment() {
	// Called for every pixel the material is visible on.
	// linear interpolation of current height between min and max height
	// gives a value for the current height between 0 and 1
	float t = (height - min_height)/(max_height - min_height);
	
	// sample the height_colour texture - because it's a 1D gradient, always use y=0 and set x = t
	// get rgb to remove any alpha channel
	vec3 colour = texture(height_colour, vec2(t, 0.0)).rgb;
	
	// set colour
	ALBEDO = colour;
}

//void light() {
	// Called for every pixel for every light affecting the material.
	// Uncomment to replace the default light processing function with this one.
//}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_m6bar"]
resource_local_to_scene = true
render_priority = 0
shader = SubResource("Shader_xum18")
shader_parameter/min_height = 1.0
shader_parameter/max_height = 1.27799
shader_parameter/height_colour = SubResource("GradientTexture1D_6lmls")

[sub_resource type="ArrayMesh" id="ArrayMesh_144sp"]
_surfaces = [{
"aabb": AABB(-353.55338, -502.5753, -398.71936, 713.4407, 213.90015, 752.2727),
"attribute_data": PackedByteArray("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"),
"format": 34359742487,
"index_count": 24,
"index_data": PackedByteArray("AwAEAAAABAABAAAABAAFAAEABQACAAEABgAHAAMABwAEAAMABwAIAAQACAAFAAQA"),
"material": SubResource("ShaderMaterial_m6bar"),
"primitive": 3,
"uv_scale": Vector4(0, 0, 0, 0),
"vertex_count": 9,
"vertex_data": PackedByteArray("YSudQ2ErncNhK51DAAAAANXGsMPVxrBDRl6hw0ZeocNGXqFDk/GzQ5Pxs8MAAAAAAAAAAKNJ+8MAAAAA1caww9XGsMMAAAAAa1aQQ2tWkMNrVpDDAAAAABRcx8MUXMfDa1aQw2tWkMNrVpDDC5fwL+sc9qifdAIoUgJ40Nd0UBZDCkLKqq0KI704Uq8Ie70I3QQ4xNVioyUVIIbPprxTI4hP5Ks1pTELHCwQt4VJSSFoN93L")
}]

[sub_resource type="ConcavePolygonShape3D" id="ConcavePolygonShape3D_yajt3"]
data = PackedVector3Array(359.8873, -359.8873, 0, 0, -502.5753, 0, 314.3389, -314.3389, 314.3389, 0, -502.5753, 0, 0, -353.5534, 353.5534, 314.3389, -314.3389, 314.3389, 0, -502.5753, 0, -353.5534, -353.5534, 0, 0, -353.5534, 353.5534, -353.5534, -353.5534, 0, -322.73648, -322.73648, 322.73648, 0, -353.5534, 353.5534, 288.67508, -288.67508, -288.67508, 0, -398.7194, -398.7194, 359.8873, -359.8873, 0, 0, -398.7194, -398.7194, 0, -502.5753, 0, 359.8873, -359.8873, 0, 0, -398.7194, -398.7194, -288.67508, -288.67508, -288.67508, 0, -502.5753, 0, -288.67508, -288.67508, -288.67508, -353.5534, -353.5534, 0, 0, -502.5753, 0)

[sub_resource type="Shader" id="Shader_x8yq1"]
code = "shader_type spatial;

// use uniforms to pass values between code and shaders
uniform float min_height;
uniform float max_height;
// gradient texture to assign colours to planet regions
uniform sampler2D height_colour;

// variable interpolated between vertices
varying float height;

void vertex() {
	// given the origin of the mesh is the centre of the planet,
	// the height is just the length of the current vertex in local space
	height = length(VERTEX);

}

void fragment() {
	// Called for every pixel the material is visible on.
	// linear interpolation of current height between min and max height
	// gives a value for the current height between 0 and 1
	float t = (height - min_height)/(max_height - min_height);
	
	// sample the height_colour texture - because it's a 1D gradient, always use y=0 and set x = t
	// get rgb to remove any alpha channel
	vec3 colour = texture(height_colour, vec2(t, 0.0)).rgb;
	
	// set colour
	ALBEDO = colour;
}

//void light() {
	// Called for every pixel for every light affecting the material.
	// Uncomment to replace the default light processing function with this one.
//}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_rsbom"]
resource_local_to_scene = true
render_priority = 0
shader = SubResource("Shader_x8yq1")
shader_parameter/min_height = 1.0
shader_parameter/max_height = 1.27799
shader_parameter/height_colour = SubResource("GradientTexture1D_6lmls")

[sub_resource type="ArrayMesh" id="ArrayMesh_8ijfx"]
_surfaces = [{
"aabb": AABB(-564.9511, -353.55338, -378.3374, 276.27597, 707.10675, 763.6249),
"attribute_data": PackedByteArray("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"),
"format": 34359742487,
"index_count": 24,
"index_data": PackedByteArray("AwAEAAAABAABAAAABAAFAAEABQACAAEABgAHAAMABwAEAAMABwAIAAQACAAFAAQA"),
"material": SubResource("ShaderMaterial_rsbom"),
"primitive": 3,
"uv_scale": Vector4(0, 0, 0, 0),
"vertex_count": 9,
"vertex_data": PackedByteArray("O0SkwztEpEM7RKRD1caww9XGsEMAAAAAa1aQw2tWkENrVpDDzKTAwwAAAADMpMBD3zwNxAAAAAAAAAAAMCu9wwAAAAAwK73DRl6hw0ZeocNGXqFD1caww9XGsMMAAAAAa1aQw2tWkMNrVpDDkDUgnzCJgK2iJ1m4yV25rFUe0rXDXoKuKS74bwig7ML4Aat6m3zvwNoO/rFGXfex7x83ax2HaMrbL0JZAXab05IiZ0E/WK/J")
}]

[sub_resource type="ConcavePolygonShape3D" id="ConcavePolygonShape3D_yu3wv"]
data = PackedVector3Array(-385.28748, 0, 385.28748, -564.9511, 0, 0, -328.53308, 328.53308, 328.53308, -564.9511, 0, 0, -353.5534, 353.5534, 0, -328.53308, 328.53308, 328.53308, -564.9511, 0, 0, -378.3374, 0, -378.3374, -353.5534, 353.5534, 0, -378.3374, 0, -378.3374, -288.67508, 288.67508, -288.67508, -353.5534, 353.5534, 0, -322.73648, -322.73648, 322.73648, -353.5534, -353.5534, 0, -385.28748, 0, 385.28748, -353.5534, -353.5534, 0, -564.9511, 0, 0, -385.28748, 0, 385.28748, -353.5534, -353.5534, 0, -288.67508, -288.67508, -288.67508, -564.9511, 0, 0, -288.67508, -288.67508, -288.67508, -378.3374, 0, -378.3374, -564.9511, 0, 0)

[sub_resource type="Shader" id="Shader_htx0v"]
code = "shader_type spatial;

// use uniforms to pass values between code and shaders
uniform float min_height;
uniform float max_height;
// gradient texture to assign colours to planet regions
uniform sampler2D height_colour;

// variable interpolated between vertices
varying float height;

void vertex() {
	// given the origin of the mesh is the centre of the planet,
	// the height is just the length of the current vertex in local space
	height = length(VERTEX);

}

void fragment() {
	// Called for every pixel the material is visible on.
	// linear interpolation of current height between min and max height
	// gives a value for the current height between 0 and 1
	float t = (height - min_height)/(max_height - min_height);
	
	// sample the height_colour texture - because it's a 1D gradient, always use y=0 and set x = t
	// get rgb to remove any alpha channel
	vec3 colour = texture(height_colour, vec2(t, 0.0)).rgb;
	
	// set colour
	ALBEDO = colour;
}

//void light() {
	// Called for every pixel for every light affecting the material.
	// Uncomment to replace the default light processing function with this one.
//}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_dvrbo"]
resource_local_to_scene = true
render_priority = 0
shader = SubResource("Shader_htx0v")
shader_parameter/min_height = 1.0
shader_parameter/max_height = 1.27799
shader_parameter/height_colour = SubResource("GradientTexture1D_6lmls")

[sub_resource type="ArrayMesh" id="ArrayMesh_na23b"]
_surfaces = [{
"aabb": AABB(288.67514, -359.8873, -353.55338, 290.34378, 713.4407, 707.10675),
"attribute_data": PackedByteArray("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"),
"format": 34359742487,
"index_count": 24,
"index_data": PackedByteArray("AwAEAAAABAABAAAABAAFAAEABQACAAEABgAHAAMABwAEAAMABwAIAAQACAAFAAQA"),
"material": SubResource("ShaderMaterial_dvrbo"),
"primitive": 3,
"uv_scale": Vector4(0, 0, 0, 0),
"vertex_count": 9,
"vertex_data": PackedByteArray("a1aQQ2tWkENrVpDD1cawQ9XGsEMAAAAAa1aQQ2tWkENrVpBD1cawQwAAAADVxrDDNsEQRAAAAAAAAAAA1cawQwAAAADVxrBDa1aQQ2tWkMNrVpDDk/GzQ5Pxs8MAAAAAYSudQ2ErncNhK51D598uwKiZ08y1yNSnNmEWzwXRfJc7Y+rHE/GmSLWenrCQ/a2DM4E0wfPG/ZFfVD6+guguTzKRM7HN2c9HpX1gqnzFnmPyWRmt")
}]

[sub_resource type="ConcavePolygonShape3D" id="ConcavePolygonShape3D_u1vnu"]
data = PackedVector3Array(353.5534, 0, -353.5534, 579.01886, 0, 0, 288.67508, 288.67508, -288.67508, 579.01886, 0, 0, 353.5534, 353.5534, 0, 288.67508, 288.67508, -288.67508, 579.01886, 0, 0, 353.5534, 0, 353.5534, 353.5534, 353.5534, 0, 353.5534, 0, 353.5534, 288.67508, 288.67508, 288.67508, 353.5534, 353.5534, 0, 288.67508, -288.67508, -288.67508, 359.8873, -359.8873, 0, 353.5534, 0, -353.5534, 359.8873, -359.8873, 0, 579.01886, 0, 0, 353.5534, 0, -353.5534, 359.8873, -359.8873, 0, 314.3389, -314.3389, 314.3389, 579.01886, 0, 0, 314.3389, -314.3389, 314.3389, 353.5534, 0, 353.5534, 579.01886, 0, 0)

[sub_resource type="Shader" id="Shader_mj0fk"]
code = "shader_type spatial;

// use uniforms to pass values between code and shaders
uniform float min_height;
uniform float max_height;
// gradient texture to assign colours to planet regions
uniform sampler2D height_colour;

// variable interpolated between vertices
varying float height;

void vertex() {
	// given the origin of the mesh is the centre of the planet,
	// the height is just the length of the current vertex in local space
	height = length(VERTEX);

}

void fragment() {
	// Called for every pixel the material is visible on.
	// linear interpolation of current height between min and max height
	// gives a value for the current height between 0 and 1
	float t = (height - min_height)/(max_height - min_height);
	
	// sample the height_colour texture - because it's a 1D gradient, always use y=0 and set x = t
	// get rgb to remove any alpha channel
	vec3 colour = texture(height_colour, vec2(t, 0.0)).rgb;
	
	// set colour
	ALBEDO = colour;
}

//void light() {
	// Called for every pixel for every light affecting the material.
	// Uncomment to replace the default light processing function with this one.
//}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_p563i"]
resource_local_to_scene = true
render_priority = 0
shader = SubResource("Shader_mj0fk")
shader_parameter/min_height = 1.0
shader_parameter/max_height = 1.27799
shader_parameter/height_colour = SubResource("GradientTexture1D_6lmls")

[sub_resource type="ArrayMesh" id="ArrayMesh_0gwtm"]
_surfaces = [{
"aabb": AABB(-378.3374, -398.71936, -500, 731.89075, 775.5438, 211.32486),
"attribute_data": PackedByteArray("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"),
"format": 34359742487,
"index_count": 24,
"index_data": PackedByteArray("AwAEAAAABAABAAAABAAFAAEABQACAAEABgAHAAMABwAEAAMABwAIAAQACAAFAAQA"),
"material": SubResource("ShaderMaterial_p563i"),
"primitive": 3,
"uv_scale": Vector4(0, 0, 0, 0),
"vertex_count": 9,
"vertex_data": PackedByteArray("a1aQQ2tWkENrVpDD1cawQwAAAADVxrDDa1aQQ2tWkMNrVpDDAAAAAIhpvEOIabzDAAAAAAAAAAAAAPrDAAAAABRcx8MUXMfDa1aQw2tWkENrVpDDMCu9wwAAAAAwK73Da1aQw2tWkMNrVpDDKei74VusuI5T+JskVZ//mYLoUyNUl2CdDh+W9kpSP4kr/3f+VILCgP7moAvdhOaPVR4N4kFJppOKCVPhRV/3kGYYsh0GXU+i")
}]

[sub_resource type="ConcavePolygonShape3D" id="ConcavePolygonShape3D_i18mc"]
data = PackedVector3Array(0, 376.8245, -376.8245, 0, 0, -500, 288.67508, 288.67508, -288.67508, 0, 0, -500, 353.5534, 0, -353.5534, 288.67508, 288.67508, -288.67508, 0, 0, -500, 0, -398.7194, -398.7194, 353.5534, 0, -353.5534, 0, -398.7194, -398.7194, 288.67508, -288.67508, -288.67508, 353.5534, 0, -353.5534, -288.67508, 288.67508, -288.67508, -378.3374, 0, -378.3374, 0, 376.8245, -376.8245, -378.3374, 0, -378.3374, 0, 0, -500, 0, 376.8245, -376.8245, -378.3374, 0, -378.3374, -288.67508, -288.67508, -288.67508, 0, 0, -500, -288.67508, -288.67508, -288.67508, 0, -398.7194, -398.7194, 0, 0, -500)

[sub_resource type="Shader" id="Shader_h4gvt"]
code = "shader_type spatial;

// use uniforms to pass values between code and shaders
uniform float min_height;
uniform float max_height;
// gradient texture to assign colours to planet regions
uniform sampler2D height_colour;

// variable interpolated between vertices
varying float height;

void vertex() {
	// given the origin of the mesh is the centre of the planet,
	// the height is just the length of the current vertex in local space
	height = length(VERTEX);

}

void fragment() {
	// Called for every pixel the material is visible on.
	// linear interpolation of current height between min and max height
	// gives a value for the current height between 0 and 1
	float t = (height - min_height)/(max_height - min_height);
	
	// sample the height_colour texture - because it's a 1D gradient, always use y=0 and set x = t
	// get rgb to remove any alpha channel
	vec3 colour = texture(height_colour, vec2(t, 0.0)).rgb;
	
	// set colour
	ALBEDO = colour;
}

//void light() {
	// Called for every pixel for every light affecting the material.
	// Uncomment to replace the default light processing function with this one.
//}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_1wsik"]
resource_local_to_scene = true
render_priority = 0
shader = SubResource("Shader_h4gvt")
shader_parameter/min_height = 1.0
shader_parameter/max_height = 1.27799
shader_parameter/height_colour = SubResource("GradientTexture1D_6lmls")

[sub_resource type="ArrayMesh" id="ArrayMesh_n0675"]
_surfaces = [{
"aabb": AABB(-385.28748, -353.55338, 288.67514, 738.8408, 707.10675, 220.39127),
"attribute_data": PackedByteArray("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"),
"format": 34359742487,
"index_count": 24,
"index_data": PackedByteArray("AwAEAAAABAABAAAABAAFAAEABQACAAEABgAHAAMABwAEAAMABwAIAAQACAAFAAQA"),
"material": SubResource("ShaderMaterial_1wsik"),
"primitive": 3,
"uv_scale": Vector4(0, 0, 0, 0),
"vertex_count": 9,
"vertex_data": PackedByteArray("YSudQ2ErncNhK51D1cawQwAAAADVxrBDa1aQQ2tWkENrVpBDAAAAANXGsMPVxrBDAAAAAAAAAACAiP5DAAAAANXGsEPVxrBDRl6hw0ZeocNGXqFDzKTAwwAAAADMpMBDO0SkwztEpEM7RKRDepiEZ8ZRIo91oNWOUV9KnXyXfJc7Y8OcJneIX0BayoF+hAuBf3vagjeQGKDnZP+d13Q3a++bjoMJaMZy2p8gjNNtN5shiQyU")
}]

[sub_resource type="ConcavePolygonShape3D" id="ConcavePolygonShape3D_glxhu"]
data = PackedVector3Array(0, -353.5534, 353.5534, 0, 0, 509.06638, 314.3389, -314.3389, 314.3389, 0, 0, 509.06638, 353.5534, 0, 353.5534, 314.3389, -314.3389, 314.3389, 0, 0, 509.06638, 0, 353.5534, 353.5534, 353.5534, 0, 353.5534, 0, 353.5534, 353.5534, 288.67508, 288.67508, 288.67508, 353.5534, 0, 353.5534, -322.73648, -322.73648, 322.73648, -385.28748, 0, 385.28748, 0, -353.5534, 353.5534, -385.28748, 0, 385.28748, 0, 0, 509.06638, 0, -353.5534, 353.5534, -385.28748, 0, 385.28748, -328.53308, 328.53308, 328.53308, 0, 0, 509.06638, -328.53308, 328.53308, 328.53308, 0, 353.5534, 353.5534, 0, 0, 509.06638)

[node name="Node3D" type="Node3D"]

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_qmve8")

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="."]
transform = Transform3D(-0.866023, -0.433016, 0.250001, 0, 0.499998, 0.866027, -0.500003, 0.749999, -0.43301, 0, 0, 0)
shadow_enabled = true

[node name="Planet2" parent="." instance=ExtResource("2_vr651")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 302.469, 33.7074, 2006.86)
planet_data = SubResource("Resource_8n7bn")

[node name="MeshUp" parent="Planet2" index="0"]
mesh = SubResource("ArrayMesh_pp1kx")
surface_material_override/0 = SubResource("ShaderMaterial_f7kwh")
resolution = 3
planet_data = SubResource("Resource_8n7bn")

[node name="CollisionShape3D" parent="Planet2/MeshUp/MeshUp_col10" index="0"]
shape = SubResource("ConcavePolygonShape3D_wa3b3")

[node name="MeshDown" parent="Planet2" index="1"]
mesh = SubResource("ArrayMesh_144sp")
surface_material_override/0 = SubResource("ShaderMaterial_m6bar")
resolution = 3
planet_data = SubResource("Resource_8n7bn")

[node name="CollisionShape3D" parent="Planet2/MeshDown/MeshDown_col10" index="0"]
shape = SubResource("ConcavePolygonShape3D_yajt3")

[node name="MeshLeft" parent="Planet2" index="2"]
mesh = SubResource("ArrayMesh_8ijfx")
surface_material_override/0 = SubResource("ShaderMaterial_rsbom")
resolution = 3
planet_data = SubResource("Resource_8n7bn")

[node name="CollisionShape3D" parent="Planet2/MeshLeft/MeshLeft_col10" index="0"]
shape = SubResource("ConcavePolygonShape3D_yu3wv")

[node name="MeshRight" parent="Planet2" index="3"]
mesh = SubResource("ArrayMesh_na23b")
surface_material_override/0 = SubResource("ShaderMaterial_dvrbo")
resolution = 3
planet_data = SubResource("Resource_8n7bn")

[node name="CollisionShape3D" parent="Planet2/MeshRight/MeshRight_col10" index="0"]
shape = SubResource("ConcavePolygonShape3D_u1vnu")

[node name="MeshFront" parent="Planet2" index="4"]
mesh = SubResource("ArrayMesh_0gwtm")
surface_material_override/0 = SubResource("ShaderMaterial_p563i")
resolution = 3
planet_data = SubResource("Resource_8n7bn")

[node name="CollisionShape3D" parent="Planet2/MeshFront/MeshFront_col10" index="0"]
shape = SubResource("ConcavePolygonShape3D_i18mc")

[node name="MeshBack" parent="Planet2" index="5"]
mesh = SubResource("ArrayMesh_n0675")
surface_material_override/0 = SubResource("ShaderMaterial_1wsik")
resolution = 3
planet_data = SubResource("Resource_8n7bn")

[node name="CollisionShape3D" parent="Planet2/MeshBack/MeshBack_col10" index="0"]
shape = SubResource("ConcavePolygonShape3D_glxhu")

[node name="Station" parent="." instance=ExtResource("7_3pfx5")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -70, 15, 641)

[node name="PlayerShip" parent="." instance=ExtResource("5_k5gf6")]

[node name="basic station" parent="." instance=ExtResource("8_akawr")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 76.3845, -72.6272, 641)

[node name="space brigade starbird 2" parent="." instance=ExtResource("9_2bue7")]
transform = Transform3D(0.4, 0, 0, 0, 0.4, 0, 0, 0, 0.4, 86.3453, -71.9169, 646.408)

[node name="space brigade starbird classic" parent="." instance=ExtResource("10_18t8f")]
transform = Transform3D(0.4, 0, 0, 0, 0.4, 0, 0, 0, 0.4, 86.45, -71.9977, 664.908)

[node name="wallbug ship" parent="." instance=ExtResource("11_pe6qr")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 83.4712, -72.0952, 666.128)

[node name="space brigade star-ranger" parent="." instance=ExtResource("12_wftjq")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 85.468, -71.0264, 640.872)

[editable path="Planet2"]
