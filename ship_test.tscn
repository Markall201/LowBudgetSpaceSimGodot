[gd_scene load_steps=42 format=3 uid="uid://j24m6bf3xtgt"]

[ext_resource type="Texture2D" uid="uid://bkjskdmju6t8e" path="res://Assets/Skyboxes/blue-nebula-panorama.png" id="1_13pva"]
[ext_resource type="PackedScene" uid="uid://7m4dqlk8r5y6" path="res://planet.tscn" id="2_vr651"]
[ext_resource type="Curve" uid="uid://c2gpbjcjln5ht" path="res://Assets/planet_LOD_Curve.tres" id="3_mrcjk"]
[ext_resource type="Script" path="res://Scripts/Procedural Planet Generation/PlanetNoise.gd" id="4_uqdfs"]
[ext_resource type="Script" path="res://Scripts/Procedural Planet Generation/PlanetData.gd" id="5_edwk4"]
[ext_resource type="PackedScene" uid="uid://c1ukmdoquihnf" path="res://player_ship.tscn" id="5_k5gf6"]
[ext_resource type="PackedScene" uid="uid://b0kact46d6k7v" path="res://station.tscn" id="7_3pfx5"]

[sub_resource type="PanoramaSkyMaterial" id="PanoramaSkyMaterial_smvli"]
panorama = ExtResource("1_13pva")

[sub_resource type="Sky" id="Sky_cd76q"]
sky_material = SubResource("PanoramaSkyMaterial_smvli")

[sub_resource type="Environment" id="Environment_qmve8"]
background_mode = 2
sky = SubResource("Sky_cd76q")
tonemap_mode = 1
glow_enabled = true
fog_sky_affect = 0.5

[sub_resource type="Gradient" id="Gradient_4u15d"]
interpolation_mode = 2
offsets = PackedFloat32Array(0, 0.0134228, 0.210291, 0.311579, 0.486316, 0.747368, 0.985263, 1)
colors = PackedColorArray(0.505898, 0, 0.250038, 1, 0.954153, 0.861388, 0.134835, 1, 0.612282, 0.205756, 0, 1, 0.319367, 0.375031, 0.391729, 1, 0.332142, 0.362886, 0.39965, 1, 0.763837, 0.776376, 0.794245, 1, 1, 1, 1, 1, 0, 0, 0, 1)
metadata/_snap_count = 15

[sub_resource type="GradientTexture1D" id="GradientTexture1D_6lmls"]
resource_local_to_scene = true
gradient = SubResource("Gradient_4u15d")

[sub_resource type="Shader" id="Shader_o7lr8"]
code = "shader_type spatial;

// use uniforms to pass values between code and shaders
uniform float min_height;
uniform float max_height;
// gradient texture to assign colours to planet regions
uniform sampler2D height_colour;

// variable interpolated between vertices
varying float height;

void vertex() {
	// given the origin of the mesh is the centre of the planet,
	// the height is just the length of the current vertex in local space
	height = length(VERTEX);

}

void fragment() {
	// Called for every pixel the material is visible on.
	// linear interpolation of current height between min and max height
	// gives a value for the current height between 0 and 1
	float t = (height - min_height)/(max_height - min_height);
	
	// sample the height_colour texture - because it's a 1D gradient, always use y=0 and set x = t
	// get rgb to remove any alpha channel
	vec3 colour = texture(height_colour, vec2(t, 0.0)).rgb;
	
	// set colour
	ALBEDO = colour;
}

//void light() {
	// Called for every pixel for every light affecting the material.
	// Uncomment to replace the default light processing function with this one.
//}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_egul7"]
resource_local_to_scene = true
render_priority = 0
shader = SubResource("Shader_o7lr8")
shader_parameter/min_height = 1.0
shader_parameter/max_height = 1.27799
shader_parameter/height_colour = SubResource("GradientTexture1D_6lmls")

[sub_resource type="FastNoiseLite" id="FastNoiseLite_2c5qk"]
seed = 56
frequency = 1.0

[sub_resource type="Resource" id="Resource_bjoya"]
script = ExtResource("4_uqdfs")
min_height = 0.2
amplitude = 0.4
height_map = SubResource("FastNoiseLite_2c5qk")
use_first_layer_as_mask = false

[sub_resource type="Resource" id="Resource_8n7bn"]
resource_local_to_scene = true
script = ExtResource("5_edwk4")
name = ""
planet_type = 0
terrain_colour = 0
atmosphere_type = 1
seed = 56
resolution = 3
LODCurve = ExtResource("3_mrcjk")
radius = 10
planet_noise = Array[ExtResource("4_uqdfs")]([SubResource("Resource_bjoya")])
planet_colour = SubResource("GradientTexture1D_6lmls")
planet_material = SubResource("ShaderMaterial_egul7")

[sub_resource type="Shader" id="Shader_nmrpo"]
code = "shader_type spatial;

// use uniforms to pass values between code and shaders
uniform float min_height;
uniform float max_height;
// gradient texture to assign colours to planet regions
uniform sampler2D height_colour;

// variable interpolated between vertices
varying float height;

void vertex() {
	// given the origin of the mesh is the centre of the planet,
	// the height is just the length of the current vertex in local space
	height = length(VERTEX);

}

void fragment() {
	// Called for every pixel the material is visible on.
	// linear interpolation of current height between min and max height
	// gives a value for the current height between 0 and 1
	float t = (height - min_height)/(max_height - min_height);
	
	// sample the height_colour texture - because it's a 1D gradient, always use y=0 and set x = t
	// get rgb to remove any alpha channel
	vec3 colour = texture(height_colour, vec2(t, 0.0)).rgb;
	
	// set colour
	ALBEDO = colour;
}

//void light() {
	// Called for every pixel for every light affecting the material.
	// Uncomment to replace the default light processing function with this one.
//}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_mgmog"]
resource_local_to_scene = true
render_priority = 0
shader = SubResource("Shader_nmrpo")
shader_parameter/min_height = 1.0
shader_parameter/max_height = 1.27799
shader_parameter/height_colour = SubResource("GradientTexture1D_6lmls")

[sub_resource type="ArrayMesh" id="ArrayMesh_ema66"]
_surfaces = [{
"aabb": AABB(-7.07107, 5.7735, -7.53649, 14.1421, 4.97812, 14.6076),
"attribute_data": PackedByteArray(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
"format": 34359742487,
"index_count": 24,
"index_data": PackedByteArray(3, 0, 4, 0, 0, 0, 4, 0, 1, 0, 0, 0, 4, 0, 5, 0, 1, 0, 5, 0, 2, 0, 1, 0, 6, 0, 7, 0, 3, 0, 7, 0, 4, 0, 3, 0, 7, 0, 8, 0, 4, 0, 8, 0, 5, 0, 4, 0),
"material": SubResource("ShaderMaterial_mgmog"),
"primitive": 3,
"uv_scale": Vector4(0, 0, 0, 0),
"vertex_count": 9,
"vertex_data": PackedByteArray(218, 66, 210, 192, 218, 66, 210, 64, 218, 66, 210, 64, 0, 0, 0, 0, 48, 70, 226, 64, 48, 70, 226, 64, 136, 192, 184, 64, 136, 192, 184, 64, 136, 192, 184, 64, 48, 70, 226, 192, 48, 70, 226, 64, 0, 0, 0, 0, 0, 0, 0, 0, 164, 6, 44, 65, 0, 0, 0, 0, 48, 70, 226, 64, 48, 70, 226, 64, 0, 0, 0, 0, 136, 192, 184, 192, 136, 192, 184, 64, 136, 192, 184, 192, 0, 0, 0, 0, 236, 42, 241, 64, 236, 42, 241, 192, 136, 192, 184, 64, 136, 192, 184, 64, 136, 192, 184, 192, 28, 103, 56, 206, 201, 61, 140, 176, 143, 145, 116, 203, 182, 41, 177, 192, 124, 151, 5, 209, 154, 44, 234, 199, 78, 75, 236, 218, 164, 43, 130, 171, 240, 131, 231, 251, 54, 4, 247, 193, 24, 164, 79, 206, 30, 55, 136, 206, 145, 74, 13, 226, 253, 35, 122, 168, 192, 81, 104, 242, 163, 23, 175, 166, 67, 187, 58, 223, 61, 32, 228, 215)
}]

[sub_resource type="ConcavePolygonShape3D" id="ConcavePolygonShape3D_8il3b"]
data = PackedVector3Array(-7.0711, 7.0711, 0, 0, 10.7516, 0, -6.5707, 6.5707, 6.5707, 0, 10.7516, 0, 0, 7.0711, 7.0711, -6.5707, 6.5707, 6.5707, 0, 10.7516, 0, 7.0711, 7.0711, 0, 0, 7.0711, 7.0711, 7.0711, 7.0711, 0, 5.7735, 5.7735, 5.7735, 0, 7.0711, 7.0711, -5.7735, 5.7735, -5.7735, 0, 7.5365, -7.5365, -7.0711, 7.0711, 0, 0, 7.5365, -7.5365, 0, 10.7516, 0, -7.0711, 7.0711, 0, 0, 7.5365, -7.5365, 5.7735, 5.7735, -5.7735, 0, 10.7516, 0, 5.7735, 5.7735, -5.7735, 7.0711, 7.0711, 0, 0, 10.7516, 0)

[sub_resource type="Shader" id="Shader_7bhf1"]
code = "shader_type spatial;

// use uniforms to pass values between code and shaders
uniform float min_height;
uniform float max_height;
// gradient texture to assign colours to planet regions
uniform sampler2D height_colour;

// variable interpolated between vertices
varying float height;

void vertex() {
	// given the origin of the mesh is the centre of the planet,
	// the height is just the length of the current vertex in local space
	height = length(VERTEX);

}

void fragment() {
	// Called for every pixel the material is visible on.
	// linear interpolation of current height between min and max height
	// gives a value for the current height between 0 and 1
	float t = (height - min_height)/(max_height - min_height);
	
	// sample the height_colour texture - because it's a 1D gradient, always use y=0 and set x = t
	// get rgb to remove any alpha channel
	vec3 colour = texture(height_colour, vec2(t, 0.0)).rgb;
	
	// set colour
	ALBEDO = colour;
}

//void light() {
	// Called for every pixel for every light affecting the material.
	// Uncomment to replace the default light processing function with this one.
//}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_q5roc"]
resource_local_to_scene = true
render_priority = 0
shader = SubResource("Shader_7bhf1")
shader_parameter/min_height = 1.0
shader_parameter/max_height = 1.27799
shader_parameter/height_colour = SubResource("GradientTexture1D_6lmls")

[sub_resource type="ArrayMesh" id="ArrayMesh_ynmlm"]
_surfaces = [{
"aabb": AABB(-7.07107, -10.0515, -7.97439, 14.2688, 4.278, 15.0455),
"attribute_data": PackedByteArray(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
"format": 34359742487,
"index_count": 24,
"index_data": PackedByteArray(3, 0, 4, 0, 0, 0, 4, 0, 1, 0, 0, 0, 4, 0, 5, 0, 1, 0, 5, 0, 2, 0, 1, 0, 6, 0, 7, 0, 3, 0, 7, 0, 4, 0, 3, 0, 7, 0, 8, 0, 4, 0, 8, 0, 5, 0, 4, 0),
"material": SubResource("ShaderMaterial_q5roc"),
"primitive": 3,
"uv_scale": Vector4(0, 0, 0, 0),
"vertex_count": 9,
"vertex_data": PackedByteArray(72, 45, 201, 64, 72, 45, 201, 192, 72, 45, 201, 64, 0, 0, 0, 0, 48, 70, 226, 192, 48, 70, 226, 64, 37, 141, 206, 192, 37, 141, 206, 192, 37, 141, 206, 64, 240, 83, 230, 64, 240, 83, 230, 192, 0, 0, 0, 0, 0, 0, 0, 0, 248, 210, 32, 193, 0, 0, 0, 0, 48, 70, 226, 192, 48, 70, 226, 192, 0, 0, 0, 0, 136, 192, 184, 64, 136, 192, 184, 192, 136, 192, 184, 192, 0, 0, 0, 0, 47, 46, 255, 192, 47, 46, 255, 192, 136, 192, 184, 192, 136, 192, 184, 192, 136, 192, 184, 192, 11, 151, 240, 47, 235, 28, 246, 168, 159, 116, 2, 40, 82, 2, 120, 208, 215, 116, 80, 22, 67, 10, 66, 202, 170, 173, 10, 35, 189, 56, 82, 175, 8, 123, 189, 8, 221, 4, 56, 196, 213, 98, 163, 37, 21, 32, 134, 207, 166, 188, 83, 35, 136, 79, 228, 171, 53, 165, 49, 11, 28, 44, 16, 183, 133, 73, 73, 33, 104, 55, 221, 203)
}]

[sub_resource type="ConcavePolygonShape3D" id="ConcavePolygonShape3D_rs3qf"]
data = PackedVector3Array(7.1977, -7.1977, 0, 0, -10.0515, 0, 6.2868, -6.2868, 6.2868, 0, -10.0515, 0, 0, -7.0711, 7.0711, 6.2868, -6.2868, 6.2868, 0, -10.0515, 0, -7.0711, -7.0711, 0, 0, -7.0711, 7.0711, -7.0711, -7.0711, 0, -6.4547, -6.4547, 6.4547, 0, -7.0711, 7.0711, 5.7735, -5.7735, -5.7735, 0, -7.9744, -7.9744, 7.1977, -7.1977, 0, 0, -7.9744, -7.9744, 0, -10.0515, 0, 7.1977, -7.1977, 0, 0, -7.9744, -7.9744, -5.7735, -5.7735, -5.7735, 0, -10.0515, 0, -5.7735, -5.7735, -5.7735, -7.0711, -7.0711, 0, 0, -10.0515, 0)

[sub_resource type="Shader" id="Shader_nvoj7"]
code = "shader_type spatial;

// use uniforms to pass values between code and shaders
uniform float min_height;
uniform float max_height;
// gradient texture to assign colours to planet regions
uniform sampler2D height_colour;

// variable interpolated between vertices
varying float height;

void vertex() {
	// given the origin of the mesh is the centre of the planet,
	// the height is just the length of the current vertex in local space
	height = length(VERTEX);

}

void fragment() {
	// Called for every pixel the material is visible on.
	// linear interpolation of current height between min and max height
	// gives a value for the current height between 0 and 1
	float t = (height - min_height)/(max_height - min_height);
	
	// sample the height_colour texture - because it's a 1D gradient, always use y=0 and set x = t
	// get rgb to remove any alpha channel
	vec3 colour = texture(height_colour, vec2(t, 0.0)).rgb;
	
	// set colour
	ALBEDO = colour;
}

//void light() {
	// Called for every pixel for every light affecting the material.
	// Uncomment to replace the default light processing function with this one.
//}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_lxho5"]
resource_local_to_scene = true
render_priority = 0
shader = SubResource("Shader_nvoj7")
shader_parameter/min_height = 1.0
shader_parameter/max_height = 1.27799
shader_parameter/height_colour = SubResource("GradientTexture1D_6lmls")

[sub_resource type="ArrayMesh" id="ArrayMesh_0mww6"]
_surfaces = [{
"aabb": AABB(-11.299, -7.07107, -7.56675, 5.52552, 14.1421, 15.2725),
"attribute_data": PackedByteArray(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
"format": 34359742487,
"index_count": 24,
"index_data": PackedByteArray(3, 0, 4, 0, 0, 0, 4, 0, 1, 0, 0, 0, 4, 0, 5, 0, 1, 0, 5, 0, 2, 0, 1, 0, 6, 0, 7, 0, 3, 0, 7, 0, 4, 0, 3, 0, 7, 0, 8, 0, 4, 0, 8, 0, 5, 0, 4, 0),
"material": SubResource("ShaderMaterial_lxho5"),
"primitive": 3,
"uv_scale": Vector4(0, 0, 0, 0),
"vertex_count": 9,
"vertex_data": PackedByteArray(218, 66, 210, 192, 218, 66, 210, 64, 218, 66, 210, 64, 48, 70, 226, 192, 48, 70, 226, 64, 0, 0, 0, 0, 136, 192, 184, 192, 136, 192, 184, 64, 136, 192, 184, 192, 128, 149, 246, 192, 0, 0, 0, 0, 128, 149, 246, 64, 204, 200, 52, 193, 0, 0, 0, 0, 0, 0, 0, 0, 206, 34, 242, 192, 0, 0, 0, 0, 206, 34, 242, 192, 37, 141, 206, 192, 37, 141, 206, 192, 37, 141, 206, 64, 48, 70, 226, 192, 48, 70, 226, 192, 0, 0, 0, 0, 136, 192, 184, 192, 136, 192, 184, 192, 136, 192, 184, 192, 144, 53, 32, 159, 48, 137, 128, 173, 162, 39, 89, 184, 201, 93, 185, 172, 85, 30, 210, 181, 195, 94, 130, 174, 41, 46, 248, 111, 8, 160, 236, 194, 248, 1, 171, 122, 155, 124, 239, 192, 218, 14, 254, 177, 70, 93, 247, 177, 239, 31, 55, 107, 29, 135, 104, 202, 219, 47, 66, 89, 1, 118, 155, 211, 146, 34, 103, 65, 63, 88, 175, 201)
}]

[sub_resource type="ConcavePolygonShape3D" id="ConcavePolygonShape3D_plpcm"]
data = PackedVector3Array(-7.7057, 0, 7.7057, -11.299, 0, 0, -6.5707, 6.5707, 6.5707, -11.299, 0, 0, -7.0711, 7.0711, 0, -6.5707, 6.5707, 6.5707, -11.299, 0, 0, -7.5667, 0, -7.5667, -7.0711, 7.0711, 0, -7.5667, 0, -7.5667, -5.7735, 5.7735, -5.7735, -7.0711, 7.0711, 0, -6.4547, -6.4547, 6.4547, -7.0711, -7.0711, 0, -7.7057, 0, 7.7057, -7.0711, -7.0711, 0, -11.299, 0, 0, -7.7057, 0, 7.7057, -7.0711, -7.0711, 0, -5.7735, -5.7735, -5.7735, -11.299, 0, 0, -5.7735, -5.7735, -5.7735, -7.5667, 0, -7.5667, -11.299, 0, 0)

[sub_resource type="Shader" id="Shader_ss8dg"]
code = "shader_type spatial;

// use uniforms to pass values between code and shaders
uniform float min_height;
uniform float max_height;
// gradient texture to assign colours to planet regions
uniform sampler2D height_colour;

// variable interpolated between vertices
varying float height;

void vertex() {
	// given the origin of the mesh is the centre of the planet,
	// the height is just the length of the current vertex in local space
	height = length(VERTEX);

}

void fragment() {
	// Called for every pixel the material is visible on.
	// linear interpolation of current height between min and max height
	// gives a value for the current height between 0 and 1
	float t = (height - min_height)/(max_height - min_height);
	
	// sample the height_colour texture - because it's a 1D gradient, always use y=0 and set x = t
	// get rgb to remove any alpha channel
	vec3 colour = texture(height_colour, vec2(t, 0.0)).rgb;
	
	// set colour
	ALBEDO = colour;
}

//void light() {
	// Called for every pixel for every light affecting the material.
	// Uncomment to replace the default light processing function with this one.
//}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_nd7ek"]
resource_local_to_scene = true
render_priority = 0
shader = SubResource("Shader_ss8dg")
shader_parameter/min_height = 1.0
shader_parameter/max_height = 1.27799
shader_parameter/height_colour = SubResource("GradientTexture1D_6lmls")

[sub_resource type="ArrayMesh" id="ArrayMesh_bh4du"]
_surfaces = [{
"aabb": AABB(5.7735, -7.19775, -7.07107, 5.80688, 14.2688, 14.1421),
"attribute_data": PackedByteArray(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
"format": 34359742487,
"index_count": 24,
"index_data": PackedByteArray(3, 0, 4, 0, 0, 0, 4, 0, 1, 0, 0, 0, 4, 0, 5, 0, 1, 0, 5, 0, 2, 0, 1, 0, 6, 0, 7, 0, 3, 0, 7, 0, 4, 0, 3, 0, 7, 0, 8, 0, 4, 0, 8, 0, 5, 0, 4, 0),
"material": SubResource("ShaderMaterial_nd7ek"),
"primitive": 3,
"uv_scale": Vector4(0, 0, 0, 0),
"vertex_count": 9,
"vertex_data": PackedByteArray(136, 192, 184, 64, 136, 192, 184, 64, 136, 192, 184, 192, 48, 70, 226, 64, 48, 70, 226, 64, 0, 0, 0, 0, 136, 192, 184, 64, 136, 192, 184, 64, 136, 192, 184, 64, 48, 70, 226, 64, 0, 0, 0, 0, 48, 70, 226, 192, 58, 73, 57, 65, 0, 0, 0, 0, 0, 0, 0, 0, 48, 70, 226, 64, 0, 0, 0, 0, 48, 70, 226, 64, 136, 192, 184, 64, 136, 192, 184, 192, 136, 192, 184, 192, 240, 83, 230, 64, 240, 83, 230, 192, 0, 0, 0, 0, 72, 45, 201, 64, 72, 45, 201, 192, 72, 45, 201, 64, 231, 223, 46, 192, 168, 153, 211, 204, 181, 200, 212, 167, 54, 97, 22, 207, 5, 209, 124, 151, 59, 99, 234, 199, 19, 241, 166, 72, 181, 158, 158, 176, 144, 253, 173, 131, 51, 129, 52, 193, 243, 198, 253, 145, 95, 84, 62, 190, 130, 232, 46, 79, 50, 145, 51, 177, 205, 217, 207, 71, 165, 125, 96, 170, 124, 197, 158, 99, 242, 89, 25, 173)
}]

[sub_resource type="ConcavePolygonShape3D" id="ConcavePolygonShape3D_plxsp"]
data = PackedVector3Array(7.0711, 0, -7.0711, 11.5804, 0, 0, 5.7735, 5.7735, -5.7735, 11.5804, 0, 0, 7.0711, 7.0711, 0, 5.7735, 5.7735, -5.7735, 11.5804, 0, 0, 7.0711, 0, 7.0711, 7.0711, 7.0711, 0, 7.0711, 0, 7.0711, 5.7735, 5.7735, 5.7735, 7.0711, 7.0711, 0, 5.7735, -5.7735, -5.7735, 7.1977, -7.1977, 0, 7.0711, 0, -7.0711, 7.1977, -7.1977, 0, 11.5804, 0, 0, 7.0711, 0, -7.0711, 7.1977, -7.1977, 0, 6.2868, -6.2868, 6.2868, 11.5804, 0, 0, 6.2868, -6.2868, 6.2868, 7.0711, 0, 7.0711, 11.5804, 0, 0)

[sub_resource type="Shader" id="Shader_mqapj"]
code = "shader_type spatial;

// use uniforms to pass values between code and shaders
uniform float min_height;
uniform float max_height;
// gradient texture to assign colours to planet regions
uniform sampler2D height_colour;

// variable interpolated between vertices
varying float height;

void vertex() {
	// given the origin of the mesh is the centre of the planet,
	// the height is just the length of the current vertex in local space
	height = length(VERTEX);

}

void fragment() {
	// Called for every pixel the material is visible on.
	// linear interpolation of current height between min and max height
	// gives a value for the current height between 0 and 1
	float t = (height - min_height)/(max_height - min_height);
	
	// sample the height_colour texture - because it's a 1D gradient, always use y=0 and set x = t
	// get rgb to remove any alpha channel
	vec3 colour = texture(height_colour, vec2(t, 0.0)).rgb;
	
	// set colour
	ALBEDO = colour;
}

//void light() {
	// Called for every pixel for every light affecting the material.
	// Uncomment to replace the default light processing function with this one.
//}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_0yk21"]
resource_local_to_scene = true
render_priority = 0
shader = SubResource("Shader_mqapj")
shader_parameter/min_height = 1.0
shader_parameter/max_height = 1.27799
shader_parameter/height_colour = SubResource("GradientTexture1D_6lmls")

[sub_resource type="ArrayMesh" id="ArrayMesh_l2n2c"]
_surfaces = [{
"aabb": AABB(-7.56675, -7.97439, -10, 14.6378, 15.5109, 4.22651),
"attribute_data": PackedByteArray(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
"format": 34359742487,
"index_count": 24,
"index_data": PackedByteArray(3, 0, 4, 0, 0, 0, 4, 0, 1, 0, 0, 0, 4, 0, 5, 0, 1, 0, 5, 0, 2, 0, 1, 0, 6, 0, 7, 0, 3, 0, 7, 0, 4, 0, 3, 0, 7, 0, 8, 0, 4, 0, 8, 0, 5, 0, 4, 0),
"material": SubResource("ShaderMaterial_0yk21"),
"primitive": 3,
"uv_scale": Vector4(0, 0, 0, 0),
"vertex_count": 9,
"vertex_data": PackedByteArray(136, 192, 184, 64, 136, 192, 184, 64, 136, 192, 184, 192, 48, 70, 226, 64, 0, 0, 0, 0, 48, 70, 226, 192, 136, 192, 184, 64, 136, 192, 184, 192, 136, 192, 184, 192, 0, 0, 0, 0, 236, 42, 241, 64, 236, 42, 241, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 193, 0, 0, 0, 0, 47, 46, 255, 192, 47, 46, 255, 192, 136, 192, 184, 192, 136, 192, 184, 64, 136, 192, 184, 192, 206, 34, 242, 192, 0, 0, 0, 0, 206, 34, 242, 192, 136, 192, 184, 192, 136, 192, 184, 192, 136, 192, 184, 192, 41, 232, 187, 225, 91, 172, 184, 142, 83, 248, 155, 36, 85, 159, 255, 153, 130, 232, 83, 35, 84, 151, 96, 157, 14, 31, 150, 246, 74, 82, 63, 137, 43, 255, 119, 254, 84, 130, 194, 128, 254, 230, 160, 11, 221, 132, 230, 143, 85, 30, 13, 226, 65, 73, 166, 147, 138, 9, 83, 225, 69, 95, 247, 144, 102, 24, 178, 29, 6, 93, 79, 162)
}]

[sub_resource type="ConcavePolygonShape3D" id="ConcavePolygonShape3D_myu4c"]
data = PackedVector3Array(0, 7.5365, -7.5365, 0, 0, -10, 5.7735, 5.7735, -5.7735, 0, 0, -10, 7.0711, 0, -7.0711, 5.7735, 5.7735, -5.7735, 0, 0, -10, 0, -7.9744, -7.9744, 7.0711, 0, -7.0711, 0, -7.9744, -7.9744, 5.7735, -5.7735, -5.7735, 7.0711, 0, -7.0711, -5.7735, 5.7735, -5.7735, -7.5667, 0, -7.5667, 0, 7.5365, -7.5365, -7.5667, 0, -7.5667, 0, 0, -10, 0, 7.5365, -7.5365, -7.5667, 0, -7.5667, -5.7735, -5.7735, -5.7735, 0, 0, -10, -5.7735, -5.7735, -5.7735, 0, -7.9744, -7.9744, 0, 0, -10)

[sub_resource type="Shader" id="Shader_rf772"]
code = "shader_type spatial;

// use uniforms to pass values between code and shaders
uniform float min_height;
uniform float max_height;
// gradient texture to assign colours to planet regions
uniform sampler2D height_colour;

// variable interpolated between vertices
varying float height;

void vertex() {
	// given the origin of the mesh is the centre of the planet,
	// the height is just the length of the current vertex in local space
	height = length(VERTEX);

}

void fragment() {
	// Called for every pixel the material is visible on.
	// linear interpolation of current height between min and max height
	// gives a value for the current height between 0 and 1
	float t = (height - min_height)/(max_height - min_height);
	
	// sample the height_colour texture - because it's a 1D gradient, always use y=0 and set x = t
	// get rgb to remove any alpha channel
	vec3 colour = texture(height_colour, vec2(t, 0.0)).rgb;
	
	// set colour
	ALBEDO = colour;
}

//void light() {
	// Called for every pixel for every light affecting the material.
	// Uncomment to replace the default light processing function with this one.
//}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_lrywh"]
resource_local_to_scene = true
render_priority = 0
shader = SubResource("Shader_rf772")
shader_parameter/min_height = 1.0
shader_parameter/max_height = 1.27799
shader_parameter/height_colour = SubResource("GradientTexture1D_6lmls")

[sub_resource type="ArrayMesh" id="ArrayMesh_godim"]
_surfaces = [{
"aabb": AABB(-7.70575, -7.07107, 5.7735, 14.7768, 14.1421, 4.40783),
"attribute_data": PackedByteArray(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
"format": 34359742487,
"index_count": 24,
"index_data": PackedByteArray(3, 0, 4, 0, 0, 0, 4, 0, 1, 0, 0, 0, 4, 0, 5, 0, 1, 0, 5, 0, 2, 0, 1, 0, 6, 0, 7, 0, 3, 0, 7, 0, 4, 0, 3, 0, 7, 0, 8, 0, 4, 0, 8, 0, 5, 0, 4, 0),
"material": SubResource("ShaderMaterial_lrywh"),
"primitive": 3,
"uv_scale": Vector4(0, 0, 0, 0),
"vertex_count": 9,
"vertex_data": PackedByteArray(72, 45, 201, 64, 72, 45, 201, 192, 72, 45, 201, 64, 48, 70, 226, 64, 0, 0, 0, 0, 48, 70, 226, 64, 136, 192, 184, 64, 136, 192, 184, 64, 136, 192, 184, 64, 0, 0, 0, 0, 48, 70, 226, 192, 48, 70, 226, 64, 0, 0, 0, 0, 0, 0, 0, 0, 184, 230, 34, 65, 0, 0, 0, 0, 48, 70, 226, 64, 48, 70, 226, 64, 37, 141, 206, 192, 37, 141, 206, 192, 37, 141, 206, 64, 128, 149, 246, 192, 0, 0, 0, 0, 128, 149, 246, 64, 218, 66, 210, 192, 218, 66, 210, 64, 218, 66, 210, 64, 122, 152, 132, 103, 198, 81, 34, 143, 117, 160, 213, 142, 81, 95, 74, 157, 124, 151, 124, 151, 59, 99, 195, 156, 38, 119, 136, 95, 64, 90, 202, 129, 126, 132, 11, 129, 127, 123, 218, 130, 55, 144, 24, 160, 231, 100, 255, 157, 215, 116, 55, 107, 239, 155, 142, 131, 9, 104, 198, 114, 218, 159, 32, 140, 211, 109, 55, 155, 33, 137, 12, 148)
}]

[sub_resource type="ConcavePolygonShape3D" id="ConcavePolygonShape3D_8vu0w"]
data = PackedVector3Array(0, -7.0711, 7.0711, 0, 0, 10.1813, 6.2868, -6.2868, 6.2868, 0, 0, 10.1813, 7.0711, 0, 7.0711, 6.2868, -6.2868, 6.2868, 0, 0, 10.1813, 0, 7.0711, 7.0711, 7.0711, 0, 7.0711, 0, 7.0711, 7.0711, 5.7735, 5.7735, 5.7735, 7.0711, 0, 7.0711, -6.4547, -6.4547, 6.4547, -7.7057, 0, 7.7057, 0, -7.0711, 7.0711, -7.7057, 0, 7.7057, 0, 0, 10.1813, 0, -7.0711, 7.0711, -7.7057, 0, 7.7057, -6.5707, 6.5707, 6.5707, 0, 0, 10.1813, -6.5707, 6.5707, 6.5707, 0, 7.0711, 7.0711, 0, 0, 10.1813)

[node name="Node3D" type="Node3D"]

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_qmve8")

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="."]
transform = Transform3D(-0.866023, -0.433016, 0.250001, 0, 0.499998, 0.866027, -0.500003, 0.749999, -0.43301, 0, 0, 0)
shadow_enabled = true

[node name="Planet2" parent="." instance=ExtResource("2_vr651")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 2.70041, 33.7074, 679.31)
planet_data = SubResource("Resource_8n7bn")

[node name="MeshUp" parent="Planet2" index="0"]
mesh = SubResource("ArrayMesh_ema66")
surface_material_override/0 = SubResource("ShaderMaterial_mgmog")
resolution = 3
planet_data = SubResource("Resource_8n7bn")

[node name="CollisionShape3D" parent="Planet2/MeshUp/MeshUp_col9" index="0"]
shape = SubResource("ConcavePolygonShape3D_8il3b")

[node name="MeshDown" parent="Planet2" index="1"]
mesh = SubResource("ArrayMesh_ynmlm")
surface_material_override/0 = SubResource("ShaderMaterial_q5roc")
resolution = 3
planet_data = SubResource("Resource_8n7bn")

[node name="CollisionShape3D" parent="Planet2/MeshDown/MeshDown_col9" index="0"]
shape = SubResource("ConcavePolygonShape3D_rs3qf")

[node name="MeshLeft" parent="Planet2" index="2"]
mesh = SubResource("ArrayMesh_0mww6")
surface_material_override/0 = SubResource("ShaderMaterial_lxho5")
resolution = 3
planet_data = SubResource("Resource_8n7bn")

[node name="CollisionShape3D" parent="Planet2/MeshLeft/MeshLeft_col9" index="0"]
shape = SubResource("ConcavePolygonShape3D_plpcm")

[node name="MeshRight" parent="Planet2" index="3"]
mesh = SubResource("ArrayMesh_bh4du")
surface_material_override/0 = SubResource("ShaderMaterial_nd7ek")
resolution = 3
planet_data = SubResource("Resource_8n7bn")

[node name="CollisionShape3D" parent="Planet2/MeshRight/MeshRight_col9" index="0"]
shape = SubResource("ConcavePolygonShape3D_plxsp")

[node name="MeshFront" parent="Planet2" index="4"]
mesh = SubResource("ArrayMesh_l2n2c")
surface_material_override/0 = SubResource("ShaderMaterial_0yk21")
resolution = 3
planet_data = SubResource("Resource_8n7bn")

[node name="CollisionShape3D" parent="Planet2/MeshFront/MeshFront_col9" index="0"]
shape = SubResource("ConcavePolygonShape3D_myu4c")

[node name="MeshBack" parent="Planet2" index="5"]
mesh = SubResource("ArrayMesh_godim")
surface_material_override/0 = SubResource("ShaderMaterial_lrywh")
resolution = 3
planet_data = SubResource("Resource_8n7bn")

[node name="CollisionShape3D" parent="Planet2/MeshBack/MeshBack_col9" index="0"]
shape = SubResource("ConcavePolygonShape3D_8vu0w")

[node name="Station" parent="." instance=ExtResource("7_3pfx5")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -70, 15, 641)

[node name="PlayerShip" parent="." instance=ExtResource("5_k5gf6")]

[editable path="Planet2"]
